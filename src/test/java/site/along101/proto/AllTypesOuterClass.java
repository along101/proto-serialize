// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: all_types.proto

package site.along101.proto;

public final class AllTypesOuterClass {
  private AllTypesOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface AllTypesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:site.along101.proto.AllTypes)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int32 int32 = 1;</code>
     */
    int getInt32();

    /**
     * <code>uint32 uint32 = 2;</code>
     */
    int getUint32();

    /**
     * <code>sint32 sint32 = 3;</code>
     */
    int getSint32();

    /**
     * <code>fixed32 fixed32 = 4;</code>
     */
    int getFixed32();

    /**
     * <code>sfixed32 sfixed32 = 5;</code>
     */
    int getSfixed32();

    /**
     * <code>int64 int64 = 6;</code>
     */
    long getInt64();

    /**
     * <code>uint64 uint64 = 7;</code>
     */
    long getUint64();

    /**
     * <code>sint64 sint64 = 8;</code>
     */
    long getSint64();

    /**
     * <code>fixed64 fixed64 = 9;</code>
     */
    long getFixed64();

    /**
     * <code>sfixed64 sfixed64 = 10;</code>
     */
    long getSfixed64();

    /**
     * <code>bool bool = 11;</code>
     */
    boolean getBool();

    /**
     * <code>float float = 12;</code>
     */
    float getFloat();

    /**
     * <code>double double = 13;</code>
     */
    double getDouble();

    /**
     * <code>string string = 14;</code>
     */
    String getString();
    /**
     * <code>string string = 14;</code>
     */
    com.google.protobuf.ByteString
        getStringBytes();

    /**
     * <code>bytes bytes = 15;</code>
     */
    com.google.protobuf.ByteString getBytes();

    /**
     * <code>.site.along101.proto.AllTypes.NestedEnum nested_enum = 16;</code>
     */
    int getNestedEnumValue();
    /**
     * <code>.site.along101.proto.AllTypes.NestedEnum nested_enum = 16;</code>
     */
    AllTypes.NestedEnum getNestedEnum();

    /**
     * <code>.site.along101.proto.AllTypes.NestedMessage nested_message = 17;</code>
     */
    boolean hasNestedMessage();
    /**
     * <code>.site.along101.proto.AllTypes.NestedMessage nested_message = 17;</code>
     */
    AllTypes.NestedMessage getNestedMessage();
    /**
     * <code>.site.along101.proto.AllTypes.NestedMessage nested_message = 17;</code>
     */
    AllTypes.NestedMessageOrBuilder getNestedMessageOrBuilder();

    /**
     * <code>repeated int32 rep_int32 = 201;</code>
     */
    java.util.List<Integer> getRepInt32List();
    /**
     * <code>repeated int32 rep_int32 = 201;</code>
     */
    int getRepInt32Count();
    /**
     * <code>repeated int32 rep_int32 = 201;</code>
     */
    int getRepInt32(int index);

    /**
     * <code>repeated uint32 rep_uint32 = 202;</code>
     */
    java.util.List<Integer> getRepUint32List();
    /**
     * <code>repeated uint32 rep_uint32 = 202;</code>
     */
    int getRepUint32Count();
    /**
     * <code>repeated uint32 rep_uint32 = 202;</code>
     */
    int getRepUint32(int index);

    /**
     * <code>repeated sint32 rep_sint32 = 203;</code>
     */
    java.util.List<Integer> getRepSint32List();
    /**
     * <code>repeated sint32 rep_sint32 = 203;</code>
     */
    int getRepSint32Count();
    /**
     * <code>repeated sint32 rep_sint32 = 203;</code>
     */
    int getRepSint32(int index);

    /**
     * <code>repeated fixed32 rep_fixed32 = 204;</code>
     */
    java.util.List<Integer> getRepFixed32List();
    /**
     * <code>repeated fixed32 rep_fixed32 = 204;</code>
     */
    int getRepFixed32Count();
    /**
     * <code>repeated fixed32 rep_fixed32 = 204;</code>
     */
    int getRepFixed32(int index);

    /**
     * <code>repeated sfixed32 rep_sfixed32 = 205;</code>
     */
    java.util.List<Integer> getRepSfixed32List();
    /**
     * <code>repeated sfixed32 rep_sfixed32 = 205;</code>
     */
    int getRepSfixed32Count();
    /**
     * <code>repeated sfixed32 rep_sfixed32 = 205;</code>
     */
    int getRepSfixed32(int index);

    /**
     * <code>repeated int64 rep_int64 = 206;</code>
     */
    java.util.List<Long> getRepInt64List();
    /**
     * <code>repeated int64 rep_int64 = 206;</code>
     */
    int getRepInt64Count();
    /**
     * <code>repeated int64 rep_int64 = 206;</code>
     */
    long getRepInt64(int index);

    /**
     * <code>repeated uint64 rep_uint64 = 207;</code>
     */
    java.util.List<Long> getRepUint64List();
    /**
     * <code>repeated uint64 rep_uint64 = 207;</code>
     */
    int getRepUint64Count();
    /**
     * <code>repeated uint64 rep_uint64 = 207;</code>
     */
    long getRepUint64(int index);

    /**
     * <code>repeated sint64 rep_sint64 = 208;</code>
     */
    java.util.List<Long> getRepSint64List();
    /**
     * <code>repeated sint64 rep_sint64 = 208;</code>
     */
    int getRepSint64Count();
    /**
     * <code>repeated sint64 rep_sint64 = 208;</code>
     */
    long getRepSint64(int index);

    /**
     * <code>repeated fixed64 rep_fixed64 = 209;</code>
     */
    java.util.List<Long> getRepFixed64List();
    /**
     * <code>repeated fixed64 rep_fixed64 = 209;</code>
     */
    int getRepFixed64Count();
    /**
     * <code>repeated fixed64 rep_fixed64 = 209;</code>
     */
    long getRepFixed64(int index);

    /**
     * <code>repeated sfixed64 rep_sfixed64 = 210;</code>
     */
    java.util.List<Long> getRepSfixed64List();
    /**
     * <code>repeated sfixed64 rep_sfixed64 = 210;</code>
     */
    int getRepSfixed64Count();
    /**
     * <code>repeated sfixed64 rep_sfixed64 = 210;</code>
     */
    long getRepSfixed64(int index);

    /**
     * <code>repeated bool rep_bool = 211;</code>
     */
    java.util.List<Boolean> getRepBoolList();
    /**
     * <code>repeated bool rep_bool = 211;</code>
     */
    int getRepBoolCount();
    /**
     * <code>repeated bool rep_bool = 211;</code>
     */
    boolean getRepBool(int index);

    /**
     * <code>repeated float rep_float = 212;</code>
     */
    java.util.List<Float> getRepFloatList();
    /**
     * <code>repeated float rep_float = 212;</code>
     */
    int getRepFloatCount();
    /**
     * <code>repeated float rep_float = 212;</code>
     */
    float getRepFloat(int index);

    /**
     * <code>repeated double rep_double = 213;</code>
     */
    java.util.List<Double> getRepDoubleList();
    /**
     * <code>repeated double rep_double = 213;</code>
     */
    int getRepDoubleCount();
    /**
     * <code>repeated double rep_double = 213;</code>
     */
    double getRepDouble(int index);

    /**
     * <code>repeated string rep_string = 214;</code>
     */
    java.util.List<String>
        getRepStringList();
    /**
     * <code>repeated string rep_string = 214;</code>
     */
    int getRepStringCount();
    /**
     * <code>repeated string rep_string = 214;</code>
     */
    String getRepString(int index);
    /**
     * <code>repeated string rep_string = 214;</code>
     */
    com.google.protobuf.ByteString
        getRepStringBytes(int index);

    /**
     * <code>repeated bytes rep_bytes = 215;</code>
     */
    java.util.List<com.google.protobuf.ByteString> getRepBytesList();
    /**
     * <code>repeated bytes rep_bytes = 215;</code>
     */
    int getRepBytesCount();
    /**
     * <code>repeated bytes rep_bytes = 215;</code>
     */
    com.google.protobuf.ByteString getRepBytes(int index);

    /**
     * <code>repeated .site.along101.proto.AllTypes.NestedEnum rep_nested_enum = 216;</code>
     */
    java.util.List<AllTypes.NestedEnum> getRepNestedEnumList();
    /**
     * <code>repeated .site.along101.proto.AllTypes.NestedEnum rep_nested_enum = 216;</code>
     */
    int getRepNestedEnumCount();
    /**
     * <code>repeated .site.along101.proto.AllTypes.NestedEnum rep_nested_enum = 216;</code>
     */
    AllTypes.NestedEnum getRepNestedEnum(int index);
    /**
     * <code>repeated .site.along101.proto.AllTypes.NestedEnum rep_nested_enum = 216;</code>
     */
    java.util.List<Integer>
    getRepNestedEnumValueList();
    /**
     * <code>repeated .site.along101.proto.AllTypes.NestedEnum rep_nested_enum = 216;</code>
     */
    int getRepNestedEnumValue(int index);

    /**
     * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
     */
    java.util.List<AllTypes.NestedMessage>
        getRepNestedMessageList();
    /**
     * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
     */
    AllTypes.NestedMessage getRepNestedMessage(int index);
    /**
     * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
     */
    int getRepNestedMessageCount();
    /**
     * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
     */
    java.util.List<? extends AllTypes.NestedMessageOrBuilder>
        getRepNestedMessageOrBuilderList();
    /**
     * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
     */
    AllTypes.NestedMessageOrBuilder getRepNestedMessageOrBuilder(
            int index);

    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 501;</code>
     */
    int getMapInt32Int32Count();
    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 501;</code>
     */
    boolean containsMapInt32Int32(
            int key);
    /**
     * Use {@link #getMapInt32Int32Map()} instead.
     */
    @Deprecated
    java.util.Map<Integer, Integer>
    getMapInt32Int32();
    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 501;</code>
     */
    java.util.Map<Integer, Integer>
    getMapInt32Int32Map();
    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 501;</code>
     */

    int getMapInt32Int32OrDefault(
            int key,
            int defaultValue);
    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 501;</code>
     */

    int getMapInt32Int32OrThrow(
            int key);

    /**
     * <code>map&lt;string, string&gt; map_string_string = 502;</code>
     */
    int getMapStringStringCount();
    /**
     * <code>map&lt;string, string&gt; map_string_string = 502;</code>
     */
    boolean containsMapStringString(
            String key);
    /**
     * Use {@link #getMapStringStringMap()} instead.
     */
    @Deprecated
    java.util.Map<String, String>
    getMapStringString();
    /**
     * <code>map&lt;string, string&gt; map_string_string = 502;</code>
     */
    java.util.Map<String, String>
    getMapStringStringMap();
    /**
     * <code>map&lt;string, string&gt; map_string_string = 502;</code>
     */

    String getMapStringStringOrDefault(
            String key,
            String defaultValue);
    /**
     * <code>map&lt;string, string&gt; map_string_string = 502;</code>
     */

    String getMapStringStringOrThrow(
            String key);

    /**
     * <code>map&lt;string, .site.along101.proto.AllTypes.NestedMessage&gt; map_string_message = 503;</code>
     */
    int getMapStringMessageCount();
    /**
     * <code>map&lt;string, .site.along101.proto.AllTypes.NestedMessage&gt; map_string_message = 503;</code>
     */
    boolean containsMapStringMessage(
            String key);
    /**
     * Use {@link #getMapStringMessageMap()} instead.
     */
    @Deprecated
    java.util.Map<String, AllTypes.NestedMessage>
    getMapStringMessage();
    /**
     * <code>map&lt;string, .site.along101.proto.AllTypes.NestedMessage&gt; map_string_message = 503;</code>
     */
    java.util.Map<String, AllTypes.NestedMessage>
    getMapStringMessageMap();
    /**
     * <code>map&lt;string, .site.along101.proto.AllTypes.NestedMessage&gt; map_string_message = 503;</code>
     */

    AllTypes.NestedMessage getMapStringMessageOrDefault(
            String key,
            AllTypes.NestedMessage defaultValue);
    /**
     * <code>map&lt;string, .site.along101.proto.AllTypes.NestedMessage&gt; map_string_message = 503;</code>
     */

    AllTypes.NestedMessage getMapStringMessageOrThrow(
            String key);

    /**
     * <code>map&lt;string, .site.along101.proto.AllTypes.NestedEnum&gt; map_string_enum = 504;</code>
     */
    int getMapStringEnumCount();
    /**
     * <code>map&lt;string, .site.along101.proto.AllTypes.NestedEnum&gt; map_string_enum = 504;</code>
     */
    boolean containsMapStringEnum(
            String key);
    /**
     * Use {@link #getMapStringEnumMap()} instead.
     */
    @Deprecated
    java.util.Map<String, AllTypes.NestedEnum>
    getMapStringEnum();
    /**
     * <code>map&lt;string, .site.along101.proto.AllTypes.NestedEnum&gt; map_string_enum = 504;</code>
     */
    java.util.Map<String, AllTypes.NestedEnum>
    getMapStringEnumMap();
    /**
     * <code>map&lt;string, .site.along101.proto.AllTypes.NestedEnum&gt; map_string_enum = 504;</code>
     */
    AllTypes.NestedEnum getMapStringEnumOrDefault(
            String key,
            AllTypes.NestedEnum defaultValue);
    /**
     * <code>map&lt;string, .site.along101.proto.AllTypes.NestedEnum&gt; map_string_enum = 504;</code>
     */
    AllTypes.NestedEnum getMapStringEnumOrThrow(
            String key);
    /**
     * Use {@link #getMapStringEnumValueMap()} instead.
     */
    @Deprecated
    java.util.Map<String, Integer>
    getMapStringEnumValue();
    /**
     * <code>map&lt;string, .site.along101.proto.AllTypes.NestedEnum&gt; map_string_enum = 504;</code>
     */
    java.util.Map<String, Integer>
    getMapStringEnumValueMap();
    /**
     * <code>map&lt;string, .site.along101.proto.AllTypes.NestedEnum&gt; map_string_enum = 504;</code>
     */

    int getMapStringEnumValueOrDefault(
            String key,
            int defaultValue);
    /**
     * <code>map&lt;string, .site.along101.proto.AllTypes.NestedEnum&gt; map_string_enum = 504;</code>
     */

    int getMapStringEnumValueOrThrow(
            String key);
  }
  /**
   * Protobuf type {@code site.along101.proto.AllTypes}
   */
  public  static final class AllTypes extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:site.along101.proto.AllTypes)
      AllTypesOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use AllTypes.newBuilder() to construct.
    private AllTypes(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private AllTypes() {
      int32_ = 0;
      uint32_ = 0;
      sint32_ = 0;
      fixed32_ = 0;
      sfixed32_ = 0;
      int64_ = 0L;
      uint64_ = 0L;
      sint64_ = 0L;
      fixed64_ = 0L;
      sfixed64_ = 0L;
      bool_ = false;
      float_ = 0F;
      double_ = 0D;
      string_ = "";
      bytes_ = com.google.protobuf.ByteString.EMPTY;
      nestedEnum_ = 0;
      repInt32_ = java.util.Collections.emptyList();
      repUint32_ = java.util.Collections.emptyList();
      repSint32_ = java.util.Collections.emptyList();
      repFixed32_ = java.util.Collections.emptyList();
      repSfixed32_ = java.util.Collections.emptyList();
      repInt64_ = java.util.Collections.emptyList();
      repUint64_ = java.util.Collections.emptyList();
      repSint64_ = java.util.Collections.emptyList();
      repFixed64_ = java.util.Collections.emptyList();
      repSfixed64_ = java.util.Collections.emptyList();
      repBool_ = java.util.Collections.emptyList();
      repFloat_ = java.util.Collections.emptyList();
      repDouble_ = java.util.Collections.emptyList();
      repString_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      repBytes_ = java.util.Collections.emptyList();
      repNestedEnum_ = java.util.Collections.emptyList();
      repNestedMessage_ = java.util.Collections.emptyList();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private AllTypes(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              int32_ = input.readInt32();
              break;
            }
            case 16: {

              uint32_ = input.readUInt32();
              break;
            }
            case 24: {

              sint32_ = input.readSInt32();
              break;
            }
            case 37: {

              fixed32_ = input.readFixed32();
              break;
            }
            case 45: {

              sfixed32_ = input.readSFixed32();
              break;
            }
            case 48: {

              int64_ = input.readInt64();
              break;
            }
            case 56: {

              uint64_ = input.readUInt64();
              break;
            }
            case 64: {

              sint64_ = input.readSInt64();
              break;
            }
            case 73: {

              fixed64_ = input.readFixed64();
              break;
            }
            case 81: {

              sfixed64_ = input.readSFixed64();
              break;
            }
            case 88: {

              bool_ = input.readBool();
              break;
            }
            case 101: {

              float_ = input.readFloat();
              break;
            }
            case 105: {

              double_ = input.readDouble();
              break;
            }
            case 114: {
              String s = input.readStringRequireUtf8();

              string_ = s;
              break;
            }
            case 122: {

              bytes_ = input.readBytes();
              break;
            }
            case 128: {
              int rawValue = input.readEnum();

              nestedEnum_ = rawValue;
              break;
            }
            case 138: {
              NestedMessage.Builder subBuilder = null;
              if (nestedMessage_ != null) {
                subBuilder = nestedMessage_.toBuilder();
              }
              nestedMessage_ = input.readMessage(NestedMessage.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(nestedMessage_);
                nestedMessage_ = subBuilder.buildPartial();
              }

              break;
            }
            case 1608: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                repInt32_ = new java.util.ArrayList<Integer>();
                mutable_bitField0_ |= 0x00020000;
              }
              repInt32_.add(input.readInt32());
              break;
            }
            case 1610: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000) && input.getBytesUntilLimit() > 0) {
                repInt32_ = new java.util.ArrayList<Integer>();
                mutable_bitField0_ |= 0x00020000;
              }
              while (input.getBytesUntilLimit() > 0) {
                repInt32_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 1616: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                repUint32_ = new java.util.ArrayList<Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              repUint32_.add(input.readUInt32());
              break;
            }
            case 1618: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000) && input.getBytesUntilLimit() > 0) {
                repUint32_ = new java.util.ArrayList<Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              while (input.getBytesUntilLimit() > 0) {
                repUint32_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 1624: {
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
                repSint32_ = new java.util.ArrayList<Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              repSint32_.add(input.readSInt32());
              break;
            }
            case 1626: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000) && input.getBytesUntilLimit() > 0) {
                repSint32_ = new java.util.ArrayList<Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              while (input.getBytesUntilLimit() > 0) {
                repSint32_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 1637: {
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
                repFixed32_ = new java.util.ArrayList<Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              repFixed32_.add(input.readFixed32());
              break;
            }
            case 1634: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000) && input.getBytesUntilLimit() > 0) {
                repFixed32_ = new java.util.ArrayList<Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              while (input.getBytesUntilLimit() > 0) {
                repFixed32_.add(input.readFixed32());
              }
              input.popLimit(limit);
              break;
            }
            case 1645: {
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
                repSfixed32_ = new java.util.ArrayList<Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              repSfixed32_.add(input.readSFixed32());
              break;
            }
            case 1642: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000) && input.getBytesUntilLimit() > 0) {
                repSfixed32_ = new java.util.ArrayList<Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              while (input.getBytesUntilLimit() > 0) {
                repSfixed32_.add(input.readSFixed32());
              }
              input.popLimit(limit);
              break;
            }
            case 1648: {
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                repInt64_ = new java.util.ArrayList<Long>();
                mutable_bitField0_ |= 0x00400000;
              }
              repInt64_.add(input.readInt64());
              break;
            }
            case 1650: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000) && input.getBytesUntilLimit() > 0) {
                repInt64_ = new java.util.ArrayList<Long>();
                mutable_bitField0_ |= 0x00400000;
              }
              while (input.getBytesUntilLimit() > 0) {
                repInt64_.add(input.readInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 1656: {
              if (!((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
                repUint64_ = new java.util.ArrayList<Long>();
                mutable_bitField0_ |= 0x00800000;
              }
              repUint64_.add(input.readUInt64());
              break;
            }
            case 1658: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00800000) == 0x00800000) && input.getBytesUntilLimit() > 0) {
                repUint64_ = new java.util.ArrayList<Long>();
                mutable_bitField0_ |= 0x00800000;
              }
              while (input.getBytesUntilLimit() > 0) {
                repUint64_.add(input.readUInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 1664: {
              if (!((mutable_bitField0_ & 0x01000000) == 0x01000000)) {
                repSint64_ = new java.util.ArrayList<Long>();
                mutable_bitField0_ |= 0x01000000;
              }
              repSint64_.add(input.readSInt64());
              break;
            }
            case 1666: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x01000000) == 0x01000000) && input.getBytesUntilLimit() > 0) {
                repSint64_ = new java.util.ArrayList<Long>();
                mutable_bitField0_ |= 0x01000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                repSint64_.add(input.readSInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 1673: {
              if (!((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
                repFixed64_ = new java.util.ArrayList<Long>();
                mutable_bitField0_ |= 0x02000000;
              }
              repFixed64_.add(input.readFixed64());
              break;
            }
            case 1674: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x02000000) == 0x02000000) && input.getBytesUntilLimit() > 0) {
                repFixed64_ = new java.util.ArrayList<Long>();
                mutable_bitField0_ |= 0x02000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                repFixed64_.add(input.readFixed64());
              }
              input.popLimit(limit);
              break;
            }
            case 1681: {
              if (!((mutable_bitField0_ & 0x04000000) == 0x04000000)) {
                repSfixed64_ = new java.util.ArrayList<Long>();
                mutable_bitField0_ |= 0x04000000;
              }
              repSfixed64_.add(input.readSFixed64());
              break;
            }
            case 1682: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x04000000) == 0x04000000) && input.getBytesUntilLimit() > 0) {
                repSfixed64_ = new java.util.ArrayList<Long>();
                mutable_bitField0_ |= 0x04000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                repSfixed64_.add(input.readSFixed64());
              }
              input.popLimit(limit);
              break;
            }
            case 1688: {
              if (!((mutable_bitField0_ & 0x08000000) == 0x08000000)) {
                repBool_ = new java.util.ArrayList<Boolean>();
                mutable_bitField0_ |= 0x08000000;
              }
              repBool_.add(input.readBool());
              break;
            }
            case 1690: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x08000000) == 0x08000000) && input.getBytesUntilLimit() > 0) {
                repBool_ = new java.util.ArrayList<Boolean>();
                mutable_bitField0_ |= 0x08000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                repBool_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 1701: {
              if (!((mutable_bitField0_ & 0x10000000) == 0x10000000)) {
                repFloat_ = new java.util.ArrayList<Float>();
                mutable_bitField0_ |= 0x10000000;
              }
              repFloat_.add(input.readFloat());
              break;
            }
            case 1698: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x10000000) == 0x10000000) && input.getBytesUntilLimit() > 0) {
                repFloat_ = new java.util.ArrayList<Float>();
                mutable_bitField0_ |= 0x10000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                repFloat_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 1705: {
              if (!((mutable_bitField0_ & 0x20000000) == 0x20000000)) {
                repDouble_ = new java.util.ArrayList<Double>();
                mutable_bitField0_ |= 0x20000000;
              }
              repDouble_.add(input.readDouble());
              break;
            }
            case 1706: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x20000000) == 0x20000000) && input.getBytesUntilLimit() > 0) {
                repDouble_ = new java.util.ArrayList<Double>();
                mutable_bitField0_ |= 0x20000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                repDouble_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 1714: {
              String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x40000000) == 0x40000000)) {
                repString_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x40000000;
              }
              repString_.add(s);
              break;
            }
            case 1722: {
              if (!((mutable_bitField0_ & 0x80000000) == 0x80000000)) {
                repBytes_ = new java.util.ArrayList<com.google.protobuf.ByteString>();
                mutable_bitField0_ |= 0x80000000;
              }
              repBytes_.add(input.readBytes());
              break;
            }
            case 1728: {
              int rawValue = input.readEnum();
              if (!((mutable_bitField1_ & 0x00000001) == 0x00000001)) {
                repNestedEnum_ = new java.util.ArrayList<Integer>();
                mutable_bitField1_ |= 0x00000001;
              }
              repNestedEnum_.add(rawValue);
              break;
            }
            case 1730: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int rawValue = input.readEnum();
                if (!((mutable_bitField1_ & 0x00000001) == 0x00000001)) {
                  repNestedEnum_ = new java.util.ArrayList<Integer>();
                  mutable_bitField1_ |= 0x00000001;
                }
                repNestedEnum_.add(rawValue);
              }
              input.popLimit(oldLimit);
              break;
            }
            case 1738: {
              if (!((mutable_bitField1_ & 0x00000002) == 0x00000002)) {
                repNestedMessage_ = new java.util.ArrayList<NestedMessage>();
                mutable_bitField1_ |= 0x00000002;
              }
              repNestedMessage_.add(
                  input.readMessage(NestedMessage.parser(), extensionRegistry));
              break;
            }
            case 4010: {
              if (!((mutable_bitField1_ & 0x00000004) == 0x00000004)) {
                mapInt32Int32_ = com.google.protobuf.MapField.newMapField(
                    MapInt32Int32DefaultEntryHolder.defaultEntry);
                mutable_bitField1_ |= 0x00000004;
              }
              com.google.protobuf.MapEntry<Integer, Integer>
              mapInt32Int32__ = input.readMessage(
                  MapInt32Int32DefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              mapInt32Int32_.getMutableMap().put(
                  mapInt32Int32__.getKey(), mapInt32Int32__.getValue());
              break;
            }
            case 4018: {
              if (!((mutable_bitField1_ & 0x00000008) == 0x00000008)) {
                mapStringString_ = com.google.protobuf.MapField.newMapField(
                    MapStringStringDefaultEntryHolder.defaultEntry);
                mutable_bitField1_ |= 0x00000008;
              }
              com.google.protobuf.MapEntry<String, String>
              mapStringString__ = input.readMessage(
                  MapStringStringDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              mapStringString_.getMutableMap().put(
                  mapStringString__.getKey(), mapStringString__.getValue());
              break;
            }
            case 4026: {
              if (!((mutable_bitField1_ & 0x00000010) == 0x00000010)) {
                mapStringMessage_ = com.google.protobuf.MapField.newMapField(
                    MapStringMessageDefaultEntryHolder.defaultEntry);
                mutable_bitField1_ |= 0x00000010;
              }
              com.google.protobuf.MapEntry<String, NestedMessage>
              mapStringMessage__ = input.readMessage(
                  MapStringMessageDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              mapStringMessage_.getMutableMap().put(
                  mapStringMessage__.getKey(), mapStringMessage__.getValue());
              break;
            }
            case 4034: {
              if (!((mutable_bitField1_ & 0x00000020) == 0x00000020)) {
                mapStringEnum_ = com.google.protobuf.MapField.newMapField(
                    MapStringEnumDefaultEntryHolder.defaultEntry);
                mutable_bitField1_ |= 0x00000020;
              }
              com.google.protobuf.MapEntry<String, Integer>
              mapStringEnum__ = input.readMessage(
                  MapStringEnumDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              mapStringEnum_.getMutableMap().put(
                  mapStringEnum__.getKey(), mapStringEnum__.getValue());
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          repInt32_ = java.util.Collections.unmodifiableList(repInt32_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          repUint32_ = java.util.Collections.unmodifiableList(repUint32_);
        }
        if (((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
          repSint32_ = java.util.Collections.unmodifiableList(repSint32_);
        }
        if (((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
          repFixed32_ = java.util.Collections.unmodifiableList(repFixed32_);
        }
        if (((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
          repSfixed32_ = java.util.Collections.unmodifiableList(repSfixed32_);
        }
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          repInt64_ = java.util.Collections.unmodifiableList(repInt64_);
        }
        if (((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
          repUint64_ = java.util.Collections.unmodifiableList(repUint64_);
        }
        if (((mutable_bitField0_ & 0x01000000) == 0x01000000)) {
          repSint64_ = java.util.Collections.unmodifiableList(repSint64_);
        }
        if (((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
          repFixed64_ = java.util.Collections.unmodifiableList(repFixed64_);
        }
        if (((mutable_bitField0_ & 0x04000000) == 0x04000000)) {
          repSfixed64_ = java.util.Collections.unmodifiableList(repSfixed64_);
        }
        if (((mutable_bitField0_ & 0x08000000) == 0x08000000)) {
          repBool_ = java.util.Collections.unmodifiableList(repBool_);
        }
        if (((mutable_bitField0_ & 0x10000000) == 0x10000000)) {
          repFloat_ = java.util.Collections.unmodifiableList(repFloat_);
        }
        if (((mutable_bitField0_ & 0x20000000) == 0x20000000)) {
          repDouble_ = java.util.Collections.unmodifiableList(repDouble_);
        }
        if (((mutable_bitField0_ & 0x40000000) == 0x40000000)) {
          repString_ = repString_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x80000000) == 0x80000000)) {
          repBytes_ = java.util.Collections.unmodifiableList(repBytes_);
        }
        if (((mutable_bitField1_ & 0x00000001) == 0x00000001)) {
          repNestedEnum_ = java.util.Collections.unmodifiableList(repNestedEnum_);
        }
        if (((mutable_bitField1_ & 0x00000002) == 0x00000002)) {
          repNestedMessage_ = java.util.Collections.unmodifiableList(repNestedMessage_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return AllTypesOuterClass.internal_static_site_along101_proto_AllTypes_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 501:
          return internalGetMapInt32Int32();
        case 502:
          return internalGetMapStringString();
        case 503:
          return internalGetMapStringMessage();
        case 504:
          return internalGetMapStringEnum();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return AllTypesOuterClass.internal_static_site_along101_proto_AllTypes_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              AllTypes.class, Builder.class);
    }

    /**
     * Protobuf enum {@code site.along101.proto.AllTypes.NestedEnum}
     */
    public enum NestedEnum
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>A = 0;</code>
       */
      A(0),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>A = 0;</code>
       */
      public static final int A_VALUE = 0;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @Deprecated
      public static NestedEnum valueOf(int value) {
        return forNumber(value);
      }

      public static NestedEnum forNumber(int value) {
        switch (value) {
          case 0: return A;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<NestedEnum>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          NestedEnum> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<NestedEnum>() {
              public NestedEnum findValueByNumber(int number) {
                return NestedEnum.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return AllTypes.getDescriptor().getEnumTypes().get(0);
      }

      private static final NestedEnum[] VALUES = values();

      public static NestedEnum valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private NestedEnum(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:site.along101.proto.AllTypes.NestedEnum)
    }

    public interface NestedMessageOrBuilder extends
        // @@protoc_insertion_point(interface_extends:site.along101.proto.AllTypes.NestedMessage)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>int32 a = 1;</code>
       */
      int getA();
    }
    /**
     * Protobuf type {@code site.along101.proto.AllTypes.NestedMessage}
     */
    public  static final class NestedMessage extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:site.along101.proto.AllTypes.NestedMessage)
        NestedMessageOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use NestedMessage.newBuilder() to construct.
      private NestedMessage(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private NestedMessage() {
        a_ = 0;
      }

      @Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private NestedMessage(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownFieldProto3(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {

                a_ = input.readInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return AllTypesOuterClass.internal_static_site_along101_proto_AllTypes_NestedMessage_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return AllTypesOuterClass.internal_static_site_along101_proto_AllTypes_NestedMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                NestedMessage.class, Builder.class);
      }

      public static final int A_FIELD_NUMBER = 1;
      private int a_;
      /**
       * <code>int32 a = 1;</code>
       */
      public int getA() {
        return a_;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (a_ != 0) {
          output.writeInt32(1, a_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (a_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, a_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @Override
      public boolean equals(final Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof NestedMessage)) {
          return super.equals(obj);
        }
        NestedMessage other = (NestedMessage) obj;

        boolean result = true;
        result = result && (getA()
            == other.getA());
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + A_FIELD_NUMBER;
        hash = (53 * hash) + getA();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static NestedMessage parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static NestedMessage parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static NestedMessage parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static NestedMessage parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static NestedMessage parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static NestedMessage parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static NestedMessage parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static NestedMessage parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static NestedMessage parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static NestedMessage parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static NestedMessage parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static NestedMessage parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(NestedMessage prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @Override
      protected Builder newBuilderForType(
          BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code site.along101.proto.AllTypes.NestedMessage}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:site.along101.proto.AllTypes.NestedMessage)
          NestedMessageOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return AllTypesOuterClass.internal_static_site_along101_proto_AllTypes_NestedMessage_descriptor;
        }

        protected FieldAccessorTable
            internalGetFieldAccessorTable() {
          return AllTypesOuterClass.internal_static_site_along101_proto_AllTypes_NestedMessage_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  NestedMessage.class, Builder.class);
        }

        // Construct using site.along101.proto.AllTypesOuterClass.AllTypes.NestedMessage.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          a_ = 0;

          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return AllTypesOuterClass.internal_static_site_along101_proto_AllTypes_NestedMessage_descriptor;
        }

        public NestedMessage getDefaultInstanceForType() {
          return NestedMessage.getDefaultInstance();
        }

        public NestedMessage build() {
          NestedMessage result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public NestedMessage buildPartial() {
          NestedMessage result = new NestedMessage(this);
          result.a_ = a_;
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof NestedMessage) {
            return mergeFrom((NestedMessage)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(NestedMessage other) {
          if (other == NestedMessage.getDefaultInstance()) return this;
          if (other.getA() != 0) {
            setA(other.getA());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          NestedMessage parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (NestedMessage) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int a_ ;
        /**
         * <code>int32 a = 1;</code>
         */
        public int getA() {
          return a_;
        }
        /**
         * <code>int32 a = 1;</code>
         */
        public Builder setA(int value) {
          
          a_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 a = 1;</code>
         */
        public Builder clearA() {
          
          a_ = 0;
          onChanged();
          return this;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFieldsProto3(unknownFields);
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:site.along101.proto.AllTypes.NestedMessage)
      }

      // @@protoc_insertion_point(class_scope:site.along101.proto.AllTypes.NestedMessage)
      private static final NestedMessage DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new NestedMessage();
      }

      public static NestedMessage getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<NestedMessage>
          PARSER = new com.google.protobuf.AbstractParser<NestedMessage>() {
        public NestedMessage parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new NestedMessage(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<NestedMessage> parser() {
        return PARSER;
      }

      @Override
      public com.google.protobuf.Parser<NestedMessage> getParserForType() {
        return PARSER;
      }

      public NestedMessage getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int INT32_FIELD_NUMBER = 1;
    private int int32_;
    /**
     * <code>int32 int32 = 1;</code>
     */
    public int getInt32() {
      return int32_;
    }

    public static final int UINT32_FIELD_NUMBER = 2;
    private int uint32_;
    /**
     * <code>uint32 uint32 = 2;</code>
     */
    public int getUint32() {
      return uint32_;
    }

    public static final int SINT32_FIELD_NUMBER = 3;
    private int sint32_;
    /**
     * <code>sint32 sint32 = 3;</code>
     */
    public int getSint32() {
      return sint32_;
    }

    public static final int FIXED32_FIELD_NUMBER = 4;
    private int fixed32_;
    /**
     * <code>fixed32 fixed32 = 4;</code>
     */
    public int getFixed32() {
      return fixed32_;
    }

    public static final int SFIXED32_FIELD_NUMBER = 5;
    private int sfixed32_;
    /**
     * <code>sfixed32 sfixed32 = 5;</code>
     */
    public int getSfixed32() {
      return sfixed32_;
    }

    public static final int INT64_FIELD_NUMBER = 6;
    private long int64_;
    /**
     * <code>int64 int64 = 6;</code>
     */
    public long getInt64() {
      return int64_;
    }

    public static final int UINT64_FIELD_NUMBER = 7;
    private long uint64_;
    /**
     * <code>uint64 uint64 = 7;</code>
     */
    public long getUint64() {
      return uint64_;
    }

    public static final int SINT64_FIELD_NUMBER = 8;
    private long sint64_;
    /**
     * <code>sint64 sint64 = 8;</code>
     */
    public long getSint64() {
      return sint64_;
    }

    public static final int FIXED64_FIELD_NUMBER = 9;
    private long fixed64_;
    /**
     * <code>fixed64 fixed64 = 9;</code>
     */
    public long getFixed64() {
      return fixed64_;
    }

    public static final int SFIXED64_FIELD_NUMBER = 10;
    private long sfixed64_;
    /**
     * <code>sfixed64 sfixed64 = 10;</code>
     */
    public long getSfixed64() {
      return sfixed64_;
    }

    public static final int BOOL_FIELD_NUMBER = 11;
    private boolean bool_;
    /**
     * <code>bool bool = 11;</code>
     */
    public boolean getBool() {
      return bool_;
    }

    public static final int FLOAT_FIELD_NUMBER = 12;
    private float float_;
    /**
     * <code>float float = 12;</code>
     */
    public float getFloat() {
      return float_;
    }

    public static final int DOUBLE_FIELD_NUMBER = 13;
    private double double_;
    /**
     * <code>double double = 13;</code>
     */
    public double getDouble() {
      return double_;
    }

    public static final int STRING_FIELD_NUMBER = 14;
    private volatile Object string_;
    /**
     * <code>string string = 14;</code>
     */
    public String getString() {
      Object ref = string_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        string_ = s;
        return s;
      }
    }
    /**
     * <code>string string = 14;</code>
     */
    public com.google.protobuf.ByteString
        getStringBytes() {
      Object ref = string_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        string_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BYTES_FIELD_NUMBER = 15;
    private com.google.protobuf.ByteString bytes_;
    /**
     * <code>bytes bytes = 15;</code>
     */
    public com.google.protobuf.ByteString getBytes() {
      return bytes_;
    }

    public static final int NESTED_ENUM_FIELD_NUMBER = 16;
    private int nestedEnum_;
    /**
     * <code>.site.along101.proto.AllTypes.NestedEnum nested_enum = 16;</code>
     */
    public int getNestedEnumValue() {
      return nestedEnum_;
    }
    /**
     * <code>.site.along101.proto.AllTypes.NestedEnum nested_enum = 16;</code>
     */
    public NestedEnum getNestedEnum() {
      NestedEnum result = NestedEnum.valueOf(nestedEnum_);
      return result == null ? NestedEnum.UNRECOGNIZED : result;
    }

    public static final int NESTED_MESSAGE_FIELD_NUMBER = 17;
    private NestedMessage nestedMessage_;
    /**
     * <code>.site.along101.proto.AllTypes.NestedMessage nested_message = 17;</code>
     */
    public boolean hasNestedMessage() {
      return nestedMessage_ != null;
    }
    /**
     * <code>.site.along101.proto.AllTypes.NestedMessage nested_message = 17;</code>
     */
    public NestedMessage getNestedMessage() {
      return nestedMessage_ == null ? NestedMessage.getDefaultInstance() : nestedMessage_;
    }
    /**
     * <code>.site.along101.proto.AllTypes.NestedMessage nested_message = 17;</code>
     */
    public NestedMessageOrBuilder getNestedMessageOrBuilder() {
      return getNestedMessage();
    }

    public static final int REP_INT32_FIELD_NUMBER = 201;
    private java.util.List<Integer> repInt32_;
    /**
     * <code>repeated int32 rep_int32 = 201;</code>
     */
    public java.util.List<Integer>
        getRepInt32List() {
      return repInt32_;
    }
    /**
     * <code>repeated int32 rep_int32 = 201;</code>
     */
    public int getRepInt32Count() {
      return repInt32_.size();
    }
    /**
     * <code>repeated int32 rep_int32 = 201;</code>
     */
    public int getRepInt32(int index) {
      return repInt32_.get(index);
    }
    private int repInt32MemoizedSerializedSize = -1;

    public static final int REP_UINT32_FIELD_NUMBER = 202;
    private java.util.List<Integer> repUint32_;
    /**
     * <code>repeated uint32 rep_uint32 = 202;</code>
     */
    public java.util.List<Integer>
        getRepUint32List() {
      return repUint32_;
    }
    /**
     * <code>repeated uint32 rep_uint32 = 202;</code>
     */
    public int getRepUint32Count() {
      return repUint32_.size();
    }
    /**
     * <code>repeated uint32 rep_uint32 = 202;</code>
     */
    public int getRepUint32(int index) {
      return repUint32_.get(index);
    }
    private int repUint32MemoizedSerializedSize = -1;

    public static final int REP_SINT32_FIELD_NUMBER = 203;
    private java.util.List<Integer> repSint32_;
    /**
     * <code>repeated sint32 rep_sint32 = 203;</code>
     */
    public java.util.List<Integer>
        getRepSint32List() {
      return repSint32_;
    }
    /**
     * <code>repeated sint32 rep_sint32 = 203;</code>
     */
    public int getRepSint32Count() {
      return repSint32_.size();
    }
    /**
     * <code>repeated sint32 rep_sint32 = 203;</code>
     */
    public int getRepSint32(int index) {
      return repSint32_.get(index);
    }
    private int repSint32MemoizedSerializedSize = -1;

    public static final int REP_FIXED32_FIELD_NUMBER = 204;
    private java.util.List<Integer> repFixed32_;
    /**
     * <code>repeated fixed32 rep_fixed32 = 204;</code>
     */
    public java.util.List<Integer>
        getRepFixed32List() {
      return repFixed32_;
    }
    /**
     * <code>repeated fixed32 rep_fixed32 = 204;</code>
     */
    public int getRepFixed32Count() {
      return repFixed32_.size();
    }
    /**
     * <code>repeated fixed32 rep_fixed32 = 204;</code>
     */
    public int getRepFixed32(int index) {
      return repFixed32_.get(index);
    }
    private int repFixed32MemoizedSerializedSize = -1;

    public static final int REP_SFIXED32_FIELD_NUMBER = 205;
    private java.util.List<Integer> repSfixed32_;
    /**
     * <code>repeated sfixed32 rep_sfixed32 = 205;</code>
     */
    public java.util.List<Integer>
        getRepSfixed32List() {
      return repSfixed32_;
    }
    /**
     * <code>repeated sfixed32 rep_sfixed32 = 205;</code>
     */
    public int getRepSfixed32Count() {
      return repSfixed32_.size();
    }
    /**
     * <code>repeated sfixed32 rep_sfixed32 = 205;</code>
     */
    public int getRepSfixed32(int index) {
      return repSfixed32_.get(index);
    }
    private int repSfixed32MemoizedSerializedSize = -1;

    public static final int REP_INT64_FIELD_NUMBER = 206;
    private java.util.List<Long> repInt64_;
    /**
     * <code>repeated int64 rep_int64 = 206;</code>
     */
    public java.util.List<Long>
        getRepInt64List() {
      return repInt64_;
    }
    /**
     * <code>repeated int64 rep_int64 = 206;</code>
     */
    public int getRepInt64Count() {
      return repInt64_.size();
    }
    /**
     * <code>repeated int64 rep_int64 = 206;</code>
     */
    public long getRepInt64(int index) {
      return repInt64_.get(index);
    }
    private int repInt64MemoizedSerializedSize = -1;

    public static final int REP_UINT64_FIELD_NUMBER = 207;
    private java.util.List<Long> repUint64_;
    /**
     * <code>repeated uint64 rep_uint64 = 207;</code>
     */
    public java.util.List<Long>
        getRepUint64List() {
      return repUint64_;
    }
    /**
     * <code>repeated uint64 rep_uint64 = 207;</code>
     */
    public int getRepUint64Count() {
      return repUint64_.size();
    }
    /**
     * <code>repeated uint64 rep_uint64 = 207;</code>
     */
    public long getRepUint64(int index) {
      return repUint64_.get(index);
    }
    private int repUint64MemoizedSerializedSize = -1;

    public static final int REP_SINT64_FIELD_NUMBER = 208;
    private java.util.List<Long> repSint64_;
    /**
     * <code>repeated sint64 rep_sint64 = 208;</code>
     */
    public java.util.List<Long>
        getRepSint64List() {
      return repSint64_;
    }
    /**
     * <code>repeated sint64 rep_sint64 = 208;</code>
     */
    public int getRepSint64Count() {
      return repSint64_.size();
    }
    /**
     * <code>repeated sint64 rep_sint64 = 208;</code>
     */
    public long getRepSint64(int index) {
      return repSint64_.get(index);
    }
    private int repSint64MemoizedSerializedSize = -1;

    public static final int REP_FIXED64_FIELD_NUMBER = 209;
    private java.util.List<Long> repFixed64_;
    /**
     * <code>repeated fixed64 rep_fixed64 = 209;</code>
     */
    public java.util.List<Long>
        getRepFixed64List() {
      return repFixed64_;
    }
    /**
     * <code>repeated fixed64 rep_fixed64 = 209;</code>
     */
    public int getRepFixed64Count() {
      return repFixed64_.size();
    }
    /**
     * <code>repeated fixed64 rep_fixed64 = 209;</code>
     */
    public long getRepFixed64(int index) {
      return repFixed64_.get(index);
    }
    private int repFixed64MemoizedSerializedSize = -1;

    public static final int REP_SFIXED64_FIELD_NUMBER = 210;
    private java.util.List<Long> repSfixed64_;
    /**
     * <code>repeated sfixed64 rep_sfixed64 = 210;</code>
     */
    public java.util.List<Long>
        getRepSfixed64List() {
      return repSfixed64_;
    }
    /**
     * <code>repeated sfixed64 rep_sfixed64 = 210;</code>
     */
    public int getRepSfixed64Count() {
      return repSfixed64_.size();
    }
    /**
     * <code>repeated sfixed64 rep_sfixed64 = 210;</code>
     */
    public long getRepSfixed64(int index) {
      return repSfixed64_.get(index);
    }
    private int repSfixed64MemoizedSerializedSize = -1;

    public static final int REP_BOOL_FIELD_NUMBER = 211;
    private java.util.List<Boolean> repBool_;
    /**
     * <code>repeated bool rep_bool = 211;</code>
     */
    public java.util.List<Boolean>
        getRepBoolList() {
      return repBool_;
    }
    /**
     * <code>repeated bool rep_bool = 211;</code>
     */
    public int getRepBoolCount() {
      return repBool_.size();
    }
    /**
     * <code>repeated bool rep_bool = 211;</code>
     */
    public boolean getRepBool(int index) {
      return repBool_.get(index);
    }
    private int repBoolMemoizedSerializedSize = -1;

    public static final int REP_FLOAT_FIELD_NUMBER = 212;
    private java.util.List<Float> repFloat_;
    /**
     * <code>repeated float rep_float = 212;</code>
     */
    public java.util.List<Float>
        getRepFloatList() {
      return repFloat_;
    }
    /**
     * <code>repeated float rep_float = 212;</code>
     */
    public int getRepFloatCount() {
      return repFloat_.size();
    }
    /**
     * <code>repeated float rep_float = 212;</code>
     */
    public float getRepFloat(int index) {
      return repFloat_.get(index);
    }
    private int repFloatMemoizedSerializedSize = -1;

    public static final int REP_DOUBLE_FIELD_NUMBER = 213;
    private java.util.List<Double> repDouble_;
    /**
     * <code>repeated double rep_double = 213;</code>
     */
    public java.util.List<Double>
        getRepDoubleList() {
      return repDouble_;
    }
    /**
     * <code>repeated double rep_double = 213;</code>
     */
    public int getRepDoubleCount() {
      return repDouble_.size();
    }
    /**
     * <code>repeated double rep_double = 213;</code>
     */
    public double getRepDouble(int index) {
      return repDouble_.get(index);
    }
    private int repDoubleMemoizedSerializedSize = -1;

    public static final int REP_STRING_FIELD_NUMBER = 214;
    private com.google.protobuf.LazyStringList repString_;
    /**
     * <code>repeated string rep_string = 214;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getRepStringList() {
      return repString_;
    }
    /**
     * <code>repeated string rep_string = 214;</code>
     */
    public int getRepStringCount() {
      return repString_.size();
    }
    /**
     * <code>repeated string rep_string = 214;</code>
     */
    public String getRepString(int index) {
      return repString_.get(index);
    }
    /**
     * <code>repeated string rep_string = 214;</code>
     */
    public com.google.protobuf.ByteString
        getRepStringBytes(int index) {
      return repString_.getByteString(index);
    }

    public static final int REP_BYTES_FIELD_NUMBER = 215;
    private java.util.List<com.google.protobuf.ByteString> repBytes_;
    /**
     * <code>repeated bytes rep_bytes = 215;</code>
     */
    public java.util.List<com.google.protobuf.ByteString>
        getRepBytesList() {
      return repBytes_;
    }
    /**
     * <code>repeated bytes rep_bytes = 215;</code>
     */
    public int getRepBytesCount() {
      return repBytes_.size();
    }
    /**
     * <code>repeated bytes rep_bytes = 215;</code>
     */
    public com.google.protobuf.ByteString getRepBytes(int index) {
      return repBytes_.get(index);
    }

    public static final int REP_NESTED_ENUM_FIELD_NUMBER = 216;
    private java.util.List<Integer> repNestedEnum_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        Integer, NestedEnum> repNestedEnum_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                Integer, NestedEnum>() {
              public NestedEnum convert(Integer from) {
                NestedEnum result = NestedEnum.valueOf(from);
                return result == null ? NestedEnum.UNRECOGNIZED : result;
              }
            };
    /**
     * <code>repeated .site.along101.proto.AllTypes.NestedEnum rep_nested_enum = 216;</code>
     */
    public java.util.List<NestedEnum> getRepNestedEnumList() {
      return new com.google.protobuf.Internal.ListAdapter<
          Integer, NestedEnum>(repNestedEnum_, repNestedEnum_converter_);
    }
    /**
     * <code>repeated .site.along101.proto.AllTypes.NestedEnum rep_nested_enum = 216;</code>
     */
    public int getRepNestedEnumCount() {
      return repNestedEnum_.size();
    }
    /**
     * <code>repeated .site.along101.proto.AllTypes.NestedEnum rep_nested_enum = 216;</code>
     */
    public NestedEnum getRepNestedEnum(int index) {
      return repNestedEnum_converter_.convert(repNestedEnum_.get(index));
    }
    /**
     * <code>repeated .site.along101.proto.AllTypes.NestedEnum rep_nested_enum = 216;</code>
     */
    public java.util.List<Integer>
    getRepNestedEnumValueList() {
      return repNestedEnum_;
    }
    /**
     * <code>repeated .site.along101.proto.AllTypes.NestedEnum rep_nested_enum = 216;</code>
     */
    public int getRepNestedEnumValue(int index) {
      return repNestedEnum_.get(index);
    }
    private int repNestedEnumMemoizedSerializedSize;

    public static final int REP_NESTED_MESSAGE_FIELD_NUMBER = 217;
    private java.util.List<NestedMessage> repNestedMessage_;
    /**
     * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
     */
    public java.util.List<NestedMessage> getRepNestedMessageList() {
      return repNestedMessage_;
    }
    /**
     * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
     */
    public java.util.List<? extends NestedMessageOrBuilder>
        getRepNestedMessageOrBuilderList() {
      return repNestedMessage_;
    }
    /**
     * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
     */
    public int getRepNestedMessageCount() {
      return repNestedMessage_.size();
    }
    /**
     * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
     */
    public NestedMessage getRepNestedMessage(int index) {
      return repNestedMessage_.get(index);
    }
    /**
     * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
     */
    public NestedMessageOrBuilder getRepNestedMessageOrBuilder(
        int index) {
      return repNestedMessage_.get(index);
    }

    public static final int MAP_INT32_INT32_FIELD_NUMBER = 501;
    private static final class MapInt32Int32DefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          Integer, Integer> defaultEntry =
              com.google.protobuf.MapEntry
              .<Integer, Integer>newDefaultInstance(
                  AllTypesOuterClass.internal_static_site_along101_proto_AllTypes_MapInt32Int32Entry_descriptor,
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0);
    }
    private com.google.protobuf.MapField<
        Integer, Integer> mapInt32Int32_;
    private com.google.protobuf.MapField<Integer, Integer>
    internalGetMapInt32Int32() {
      if (mapInt32Int32_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            MapInt32Int32DefaultEntryHolder.defaultEntry);
      }
      return mapInt32Int32_;
    }

    public int getMapInt32Int32Count() {
      return internalGetMapInt32Int32().getMap().size();
    }
    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 501;</code>
     */

    public boolean containsMapInt32Int32(
        int key) {
      
      return internalGetMapInt32Int32().getMap().containsKey(key);
    }
    /**
     * Use {@link #getMapInt32Int32Map()} instead.
     */
    @Deprecated
    public java.util.Map<Integer, Integer> getMapInt32Int32() {
      return getMapInt32Int32Map();
    }
    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 501;</code>
     */

    public java.util.Map<Integer, Integer> getMapInt32Int32Map() {
      return internalGetMapInt32Int32().getMap();
    }
    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 501;</code>
     */

    public int getMapInt32Int32OrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<Integer, Integer> map =
          internalGetMapInt32Int32().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, int32&gt; map_int32_int32 = 501;</code>
     */

    public int getMapInt32Int32OrThrow(
        int key) {
      
      java.util.Map<Integer, Integer> map =
          internalGetMapInt32Int32().getMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int MAP_STRING_STRING_FIELD_NUMBER = 502;
    private static final class MapStringStringDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          String, String> defaultEntry =
              com.google.protobuf.MapEntry
              .<String, String>newDefaultInstance(
                  AllTypesOuterClass.internal_static_site_along101_proto_AllTypes_MapStringStringEntry_descriptor,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        String, String> mapStringString_;
    private com.google.protobuf.MapField<String, String>
    internalGetMapStringString() {
      if (mapStringString_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            MapStringStringDefaultEntryHolder.defaultEntry);
      }
      return mapStringString_;
    }

    public int getMapStringStringCount() {
      return internalGetMapStringString().getMap().size();
    }
    /**
     * <code>map&lt;string, string&gt; map_string_string = 502;</code>
     */

    public boolean containsMapStringString(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      return internalGetMapStringString().getMap().containsKey(key);
    }
    /**
     * Use {@link #getMapStringStringMap()} instead.
     */
    @Deprecated
    public java.util.Map<String, String> getMapStringString() {
      return getMapStringStringMap();
    }
    /**
     * <code>map&lt;string, string&gt; map_string_string = 502;</code>
     */

    public java.util.Map<String, String> getMapStringStringMap() {
      return internalGetMapStringString().getMap();
    }
    /**
     * <code>map&lt;string, string&gt; map_string_string = 502;</code>
     */

    public String getMapStringStringOrDefault(
        String key,
        String defaultValue) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, String> map =
          internalGetMapStringString().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, string&gt; map_string_string = 502;</code>
     */

    public String getMapStringStringOrThrow(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, String> map =
          internalGetMapStringString().getMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int MAP_STRING_MESSAGE_FIELD_NUMBER = 503;
    private static final class MapStringMessageDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          String, NestedMessage> defaultEntry =
              com.google.protobuf.MapEntry
              .<String, NestedMessage>newDefaultInstance(
                  AllTypesOuterClass.internal_static_site_along101_proto_AllTypes_MapStringMessageEntry_descriptor,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  NestedMessage.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        String, NestedMessage> mapStringMessage_;
    private com.google.protobuf.MapField<String, NestedMessage>
    internalGetMapStringMessage() {
      if (mapStringMessage_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            MapStringMessageDefaultEntryHolder.defaultEntry);
      }
      return mapStringMessage_;
    }

    public int getMapStringMessageCount() {
      return internalGetMapStringMessage().getMap().size();
    }
    /**
     * <code>map&lt;string, .site.along101.proto.AllTypes.NestedMessage&gt; map_string_message = 503;</code>
     */

    public boolean containsMapStringMessage(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      return internalGetMapStringMessage().getMap().containsKey(key);
    }
    /**
     * Use {@link #getMapStringMessageMap()} instead.
     */
    @Deprecated
    public java.util.Map<String, NestedMessage> getMapStringMessage() {
      return getMapStringMessageMap();
    }
    /**
     * <code>map&lt;string, .site.along101.proto.AllTypes.NestedMessage&gt; map_string_message = 503;</code>
     */

    public java.util.Map<String, NestedMessage> getMapStringMessageMap() {
      return internalGetMapStringMessage().getMap();
    }
    /**
     * <code>map&lt;string, .site.along101.proto.AllTypes.NestedMessage&gt; map_string_message = 503;</code>
     */

    public NestedMessage getMapStringMessageOrDefault(
        String key,
        NestedMessage defaultValue) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, NestedMessage> map =
          internalGetMapStringMessage().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, .site.along101.proto.AllTypes.NestedMessage&gt; map_string_message = 503;</code>
     */

    public NestedMessage getMapStringMessageOrThrow(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, NestedMessage> map =
          internalGetMapStringMessage().getMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int MAP_STRING_ENUM_FIELD_NUMBER = 504;
    private static final class MapStringEnumDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          String, Integer> defaultEntry =
              com.google.protobuf.MapEntry
              .<String, Integer>newDefaultInstance(
                  AllTypesOuterClass.internal_static_site_along101_proto_AllTypes_MapStringEnumEntry_descriptor,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.ENUM,
                  NestedEnum.A.getNumber());
    }
    private com.google.protobuf.MapField<
        String, Integer> mapStringEnum_;
    private com.google.protobuf.MapField<String, Integer>
    internalGetMapStringEnum() {
      if (mapStringEnum_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            MapStringEnumDefaultEntryHolder.defaultEntry);
      }
      return mapStringEnum_;
    }
    private static final
    com.google.protobuf.Internal.MapAdapter.Converter<
        Integer, NestedEnum> mapStringEnumValueConverter =
            com.google.protobuf.Internal.MapAdapter.newEnumConverter(
                NestedEnum.internalGetValueMap(),
                NestedEnum.UNRECOGNIZED);
    private static final java.util.Map<String, NestedEnum>
    internalGetAdaptedMapStringEnumMap(
        java.util.Map<String, Integer> map) {
      return new com.google.protobuf.Internal.MapAdapter<
          String, NestedEnum, Integer>(
              map, mapStringEnumValueConverter);
    }

    public int getMapStringEnumCount() {
      return internalGetMapStringEnum().getMap().size();
    }
    /**
     * <code>map&lt;string, .site.along101.proto.AllTypes.NestedEnum&gt; map_string_enum = 504;</code>
     */

    public boolean containsMapStringEnum(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      return internalGetMapStringEnum().getMap().containsKey(key);
    }
    /**
     * Use {@link #getMapStringEnumMap()} instead.
     */
    @Deprecated
    public java.util.Map<String, NestedEnum>
    getMapStringEnum() {
      return getMapStringEnumMap();
    }
    /**
     * <code>map&lt;string, .site.along101.proto.AllTypes.NestedEnum&gt; map_string_enum = 504;</code>
     */

    public java.util.Map<String, NestedEnum>
    getMapStringEnumMap() {
      return internalGetAdaptedMapStringEnumMap(
          internalGetMapStringEnum().getMap());}
    /**
     * <code>map&lt;string, .site.along101.proto.AllTypes.NestedEnum&gt; map_string_enum = 504;</code>
     */

    public NestedEnum getMapStringEnumOrDefault(
        String key,
        NestedEnum defaultValue) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, Integer> map =
          internalGetMapStringEnum().getMap();
      return map.containsKey(key)
             ? mapStringEnumValueConverter.doForward(map.get(key))
             : defaultValue;
    }
    /**
     * <code>map&lt;string, .site.along101.proto.AllTypes.NestedEnum&gt; map_string_enum = 504;</code>
     */

    public NestedEnum getMapStringEnumOrThrow(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, Integer> map =
          internalGetMapStringEnum().getMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return mapStringEnumValueConverter.doForward(map.get(key));
    }
    /**
     * Use {@link #getMapStringEnumValueMap()} instead.
     */
    @Deprecated
    public java.util.Map<String, Integer>
    getMapStringEnumValue() {
      return getMapStringEnumValueMap();
    }
    /**
     * <code>map&lt;string, .site.along101.proto.AllTypes.NestedEnum&gt; map_string_enum = 504;</code>
     */

    public java.util.Map<String, Integer>
    getMapStringEnumValueMap() {
      return internalGetMapStringEnum().getMap();
    }
    /**
     * <code>map&lt;string, .site.along101.proto.AllTypes.NestedEnum&gt; map_string_enum = 504;</code>
     */

    public int getMapStringEnumValueOrDefault(
        String key,
        int defaultValue) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, Integer> map =
          internalGetMapStringEnum().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, .site.along101.proto.AllTypes.NestedEnum&gt; map_string_enum = 504;</code>
     */

    public int getMapStringEnumValueOrThrow(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, Integer> map =
          internalGetMapStringEnum().getMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (int32_ != 0) {
        output.writeInt32(1, int32_);
      }
      if (uint32_ != 0) {
        output.writeUInt32(2, uint32_);
      }
      if (sint32_ != 0) {
        output.writeSInt32(3, sint32_);
      }
      if (fixed32_ != 0) {
        output.writeFixed32(4, fixed32_);
      }
      if (sfixed32_ != 0) {
        output.writeSFixed32(5, sfixed32_);
      }
      if (int64_ != 0L) {
        output.writeInt64(6, int64_);
      }
      if (uint64_ != 0L) {
        output.writeUInt64(7, uint64_);
      }
      if (sint64_ != 0L) {
        output.writeSInt64(8, sint64_);
      }
      if (fixed64_ != 0L) {
        output.writeFixed64(9, fixed64_);
      }
      if (sfixed64_ != 0L) {
        output.writeSFixed64(10, sfixed64_);
      }
      if (bool_ != false) {
        output.writeBool(11, bool_);
      }
      if (float_ != 0F) {
        output.writeFloat(12, float_);
      }
      if (double_ != 0D) {
        output.writeDouble(13, double_);
      }
      if (!getStringBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 14, string_);
      }
      if (!bytes_.isEmpty()) {
        output.writeBytes(15, bytes_);
      }
      if (nestedEnum_ != NestedEnum.A.getNumber()) {
        output.writeEnum(16, nestedEnum_);
      }
      if (nestedMessage_ != null) {
        output.writeMessage(17, getNestedMessage());
      }
      if (getRepInt32List().size() > 0) {
        output.writeUInt32NoTag(1610);
        output.writeUInt32NoTag(repInt32MemoizedSerializedSize);
      }
      for (int i = 0; i < repInt32_.size(); i++) {
        output.writeInt32NoTag(repInt32_.get(i));
      }
      if (getRepUint32List().size() > 0) {
        output.writeUInt32NoTag(1618);
        output.writeUInt32NoTag(repUint32MemoizedSerializedSize);
      }
      for (int i = 0; i < repUint32_.size(); i++) {
        output.writeUInt32NoTag(repUint32_.get(i));
      }
      if (getRepSint32List().size() > 0) {
        output.writeUInt32NoTag(1626);
        output.writeUInt32NoTag(repSint32MemoizedSerializedSize);
      }
      for (int i = 0; i < repSint32_.size(); i++) {
        output.writeSInt32NoTag(repSint32_.get(i));
      }
      if (getRepFixed32List().size() > 0) {
        output.writeUInt32NoTag(1634);
        output.writeUInt32NoTag(repFixed32MemoizedSerializedSize);
      }
      for (int i = 0; i < repFixed32_.size(); i++) {
        output.writeFixed32NoTag(repFixed32_.get(i));
      }
      if (getRepSfixed32List().size() > 0) {
        output.writeUInt32NoTag(1642);
        output.writeUInt32NoTag(repSfixed32MemoizedSerializedSize);
      }
      for (int i = 0; i < repSfixed32_.size(); i++) {
        output.writeSFixed32NoTag(repSfixed32_.get(i));
      }
      if (getRepInt64List().size() > 0) {
        output.writeUInt32NoTag(1650);
        output.writeUInt32NoTag(repInt64MemoizedSerializedSize);
      }
      for (int i = 0; i < repInt64_.size(); i++) {
        output.writeInt64NoTag(repInt64_.get(i));
      }
      if (getRepUint64List().size() > 0) {
        output.writeUInt32NoTag(1658);
        output.writeUInt32NoTag(repUint64MemoizedSerializedSize);
      }
      for (int i = 0; i < repUint64_.size(); i++) {
        output.writeUInt64NoTag(repUint64_.get(i));
      }
      if (getRepSint64List().size() > 0) {
        output.writeUInt32NoTag(1666);
        output.writeUInt32NoTag(repSint64MemoizedSerializedSize);
      }
      for (int i = 0; i < repSint64_.size(); i++) {
        output.writeSInt64NoTag(repSint64_.get(i));
      }
      if (getRepFixed64List().size() > 0) {
        output.writeUInt32NoTag(1674);
        output.writeUInt32NoTag(repFixed64MemoizedSerializedSize);
      }
      for (int i = 0; i < repFixed64_.size(); i++) {
        output.writeFixed64NoTag(repFixed64_.get(i));
      }
      if (getRepSfixed64List().size() > 0) {
        output.writeUInt32NoTag(1682);
        output.writeUInt32NoTag(repSfixed64MemoizedSerializedSize);
      }
      for (int i = 0; i < repSfixed64_.size(); i++) {
        output.writeSFixed64NoTag(repSfixed64_.get(i));
      }
      if (getRepBoolList().size() > 0) {
        output.writeUInt32NoTag(1690);
        output.writeUInt32NoTag(repBoolMemoizedSerializedSize);
      }
      for (int i = 0; i < repBool_.size(); i++) {
        output.writeBoolNoTag(repBool_.get(i));
      }
      if (getRepFloatList().size() > 0) {
        output.writeUInt32NoTag(1698);
        output.writeUInt32NoTag(repFloatMemoizedSerializedSize);
      }
      for (int i = 0; i < repFloat_.size(); i++) {
        output.writeFloatNoTag(repFloat_.get(i));
      }
      if (getRepDoubleList().size() > 0) {
        output.writeUInt32NoTag(1706);
        output.writeUInt32NoTag(repDoubleMemoizedSerializedSize);
      }
      for (int i = 0; i < repDouble_.size(); i++) {
        output.writeDoubleNoTag(repDouble_.get(i));
      }
      for (int i = 0; i < repString_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 214, repString_.getRaw(i));
      }
      for (int i = 0; i < repBytes_.size(); i++) {
        output.writeBytes(215, repBytes_.get(i));
      }
      if (getRepNestedEnumList().size() > 0) {
        output.writeUInt32NoTag(1730);
        output.writeUInt32NoTag(repNestedEnumMemoizedSerializedSize);
      }
      for (int i = 0; i < repNestedEnum_.size(); i++) {
        output.writeEnumNoTag(repNestedEnum_.get(i));
      }
      for (int i = 0; i < repNestedMessage_.size(); i++) {
        output.writeMessage(217, repNestedMessage_.get(i));
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeIntegerMapTo(
          output,
          internalGetMapInt32Int32(),
          MapInt32Int32DefaultEntryHolder.defaultEntry,
          501);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetMapStringString(),
          MapStringStringDefaultEntryHolder.defaultEntry,
          502);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetMapStringMessage(),
          MapStringMessageDefaultEntryHolder.defaultEntry,
          503);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetMapStringEnum(),
          MapStringEnumDefaultEntryHolder.defaultEntry,
          504);
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (int32_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, int32_);
      }
      if (uint32_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, uint32_);
      }
      if (sint32_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, sint32_);
      }
      if (fixed32_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(4, fixed32_);
      }
      if (sfixed32_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(5, sfixed32_);
      }
      if (int64_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(6, int64_);
      }
      if (uint64_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(7, uint64_);
      }
      if (sint64_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt64Size(8, sint64_);
      }
      if (fixed64_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(9, fixed64_);
      }
      if (sfixed64_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed64Size(10, sfixed64_);
      }
      if (bool_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, bool_);
      }
      if (float_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(12, float_);
      }
      if (double_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(13, double_);
      }
      if (!getStringBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(14, string_);
      }
      if (!bytes_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(15, bytes_);
      }
      if (nestedEnum_ != NestedEnum.A.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(16, nestedEnum_);
      }
      if (nestedMessage_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, getNestedMessage());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < repInt32_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(repInt32_.get(i));
        }
        size += dataSize;
        if (!getRepInt32List().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        repInt32MemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < repUint32_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(repUint32_.get(i));
        }
        size += dataSize;
        if (!getRepUint32List().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        repUint32MemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < repSint32_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(repSint32_.get(i));
        }
        size += dataSize;
        if (!getRepSint32List().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        repSint32MemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 4 * getRepFixed32List().size();
        size += dataSize;
        if (!getRepFixed32List().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        repFixed32MemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 4 * getRepSfixed32List().size();
        size += dataSize;
        if (!getRepSfixed32List().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        repSfixed32MemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < repInt64_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(repInt64_.get(i));
        }
        size += dataSize;
        if (!getRepInt64List().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        repInt64MemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < repUint64_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(repUint64_.get(i));
        }
        size += dataSize;
        if (!getRepUint64List().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        repUint64MemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < repSint64_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt64SizeNoTag(repSint64_.get(i));
        }
        size += dataSize;
        if (!getRepSint64List().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        repSint64MemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getRepFixed64List().size();
        size += dataSize;
        if (!getRepFixed64List().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        repFixed64MemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getRepSfixed64List().size();
        size += dataSize;
        if (!getRepSfixed64List().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        repSfixed64MemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 1 * getRepBoolList().size();
        size += dataSize;
        if (!getRepBoolList().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        repBoolMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 4 * getRepFloatList().size();
        size += dataSize;
        if (!getRepFloatList().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        repFloatMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getRepDoubleList().size();
        size += dataSize;
        if (!getRepDoubleList().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        repDoubleMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < repString_.size(); i++) {
          dataSize += computeStringSizeNoTag(repString_.getRaw(i));
        }
        size += dataSize;
        size += 2 * getRepStringList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < repBytes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(repBytes_.get(i));
        }
        size += dataSize;
        size += 2 * getRepBytesList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < repNestedEnum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(repNestedEnum_.get(i));
        }
        size += dataSize;
        if (!getRepNestedEnumList().isEmpty()) {  size += 2;
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(dataSize);
        }repNestedEnumMemoizedSerializedSize = dataSize;
      }
      for (int i = 0; i < repNestedMessage_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(217, repNestedMessage_.get(i));
      }
      for (java.util.Map.Entry<Integer, Integer> entry
           : internalGetMapInt32Int32().getMap().entrySet()) {
        com.google.protobuf.MapEntry<Integer, Integer>
        mapInt32Int32__ = MapInt32Int32DefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(501, mapInt32Int32__);
      }
      for (java.util.Map.Entry<String, String> entry
           : internalGetMapStringString().getMap().entrySet()) {
        com.google.protobuf.MapEntry<String, String>
        mapStringString__ = MapStringStringDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(502, mapStringString__);
      }
      for (java.util.Map.Entry<String, NestedMessage> entry
           : internalGetMapStringMessage().getMap().entrySet()) {
        com.google.protobuf.MapEntry<String, NestedMessage>
        mapStringMessage__ = MapStringMessageDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(503, mapStringMessage__);
      }
      for (java.util.Map.Entry<String, Integer> entry
           : internalGetMapStringEnum().getMap().entrySet()) {
        com.google.protobuf.MapEntry<String, Integer>
        mapStringEnum__ = MapStringEnumDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(504, mapStringEnum__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof AllTypes)) {
        return super.equals(obj);
      }
      AllTypes other = (AllTypes) obj;

      boolean result = true;
      result = result && (getInt32()
          == other.getInt32());
      result = result && (getUint32()
          == other.getUint32());
      result = result && (getSint32()
          == other.getSint32());
      result = result && (getFixed32()
          == other.getFixed32());
      result = result && (getSfixed32()
          == other.getSfixed32());
      result = result && (getInt64()
          == other.getInt64());
      result = result && (getUint64()
          == other.getUint64());
      result = result && (getSint64()
          == other.getSint64());
      result = result && (getFixed64()
          == other.getFixed64());
      result = result && (getSfixed64()
          == other.getSfixed64());
      result = result && (getBool()
          == other.getBool());
      result = result && (
          Float.floatToIntBits(getFloat())
          == Float.floatToIntBits(
              other.getFloat()));
      result = result && (
          Double.doubleToLongBits(getDouble())
          == Double.doubleToLongBits(
              other.getDouble()));
      result = result && getString()
          .equals(other.getString());
      result = result && getBytes()
          .equals(other.getBytes());
      result = result && nestedEnum_ == other.nestedEnum_;
      result = result && (hasNestedMessage() == other.hasNestedMessage());
      if (hasNestedMessage()) {
        result = result && getNestedMessage()
            .equals(other.getNestedMessage());
      }
      result = result && getRepInt32List()
          .equals(other.getRepInt32List());
      result = result && getRepUint32List()
          .equals(other.getRepUint32List());
      result = result && getRepSint32List()
          .equals(other.getRepSint32List());
      result = result && getRepFixed32List()
          .equals(other.getRepFixed32List());
      result = result && getRepSfixed32List()
          .equals(other.getRepSfixed32List());
      result = result && getRepInt64List()
          .equals(other.getRepInt64List());
      result = result && getRepUint64List()
          .equals(other.getRepUint64List());
      result = result && getRepSint64List()
          .equals(other.getRepSint64List());
      result = result && getRepFixed64List()
          .equals(other.getRepFixed64List());
      result = result && getRepSfixed64List()
          .equals(other.getRepSfixed64List());
      result = result && getRepBoolList()
          .equals(other.getRepBoolList());
      result = result && getRepFloatList()
          .equals(other.getRepFloatList());
      result = result && getRepDoubleList()
          .equals(other.getRepDoubleList());
      result = result && getRepStringList()
          .equals(other.getRepStringList());
      result = result && getRepBytesList()
          .equals(other.getRepBytesList());
      result = result && repNestedEnum_.equals(other.repNestedEnum_);
      result = result && getRepNestedMessageList()
          .equals(other.getRepNestedMessageList());
      result = result && internalGetMapInt32Int32().equals(
          other.internalGetMapInt32Int32());
      result = result && internalGetMapStringString().equals(
          other.internalGetMapStringString());
      result = result && internalGetMapStringMessage().equals(
          other.internalGetMapStringMessage());
      result = result && internalGetMapStringEnum().equals(
          other.internalGetMapStringEnum());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + INT32_FIELD_NUMBER;
      hash = (53 * hash) + getInt32();
      hash = (37 * hash) + UINT32_FIELD_NUMBER;
      hash = (53 * hash) + getUint32();
      hash = (37 * hash) + SINT32_FIELD_NUMBER;
      hash = (53 * hash) + getSint32();
      hash = (37 * hash) + FIXED32_FIELD_NUMBER;
      hash = (53 * hash) + getFixed32();
      hash = (37 * hash) + SFIXED32_FIELD_NUMBER;
      hash = (53 * hash) + getSfixed32();
      hash = (37 * hash) + INT64_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getInt64());
      hash = (37 * hash) + UINT64_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getUint64());
      hash = (37 * hash) + SINT64_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getSint64());
      hash = (37 * hash) + FIXED64_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getFixed64());
      hash = (37 * hash) + SFIXED64_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getSfixed64());
      hash = (37 * hash) + BOOL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getBool());
      hash = (37 * hash) + FLOAT_FIELD_NUMBER;
      hash = (53 * hash) + Float.floatToIntBits(
          getFloat());
      hash = (37 * hash) + DOUBLE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getDouble()));
      hash = (37 * hash) + STRING_FIELD_NUMBER;
      hash = (53 * hash) + getString().hashCode();
      hash = (37 * hash) + BYTES_FIELD_NUMBER;
      hash = (53 * hash) + getBytes().hashCode();
      hash = (37 * hash) + NESTED_ENUM_FIELD_NUMBER;
      hash = (53 * hash) + nestedEnum_;
      if (hasNestedMessage()) {
        hash = (37 * hash) + NESTED_MESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getNestedMessage().hashCode();
      }
      if (getRepInt32Count() > 0) {
        hash = (37 * hash) + REP_INT32_FIELD_NUMBER;
        hash = (53 * hash) + getRepInt32List().hashCode();
      }
      if (getRepUint32Count() > 0) {
        hash = (37 * hash) + REP_UINT32_FIELD_NUMBER;
        hash = (53 * hash) + getRepUint32List().hashCode();
      }
      if (getRepSint32Count() > 0) {
        hash = (37 * hash) + REP_SINT32_FIELD_NUMBER;
        hash = (53 * hash) + getRepSint32List().hashCode();
      }
      if (getRepFixed32Count() > 0) {
        hash = (37 * hash) + REP_FIXED32_FIELD_NUMBER;
        hash = (53 * hash) + getRepFixed32List().hashCode();
      }
      if (getRepSfixed32Count() > 0) {
        hash = (37 * hash) + REP_SFIXED32_FIELD_NUMBER;
        hash = (53 * hash) + getRepSfixed32List().hashCode();
      }
      if (getRepInt64Count() > 0) {
        hash = (37 * hash) + REP_INT64_FIELD_NUMBER;
        hash = (53 * hash) + getRepInt64List().hashCode();
      }
      if (getRepUint64Count() > 0) {
        hash = (37 * hash) + REP_UINT64_FIELD_NUMBER;
        hash = (53 * hash) + getRepUint64List().hashCode();
      }
      if (getRepSint64Count() > 0) {
        hash = (37 * hash) + REP_SINT64_FIELD_NUMBER;
        hash = (53 * hash) + getRepSint64List().hashCode();
      }
      if (getRepFixed64Count() > 0) {
        hash = (37 * hash) + REP_FIXED64_FIELD_NUMBER;
        hash = (53 * hash) + getRepFixed64List().hashCode();
      }
      if (getRepSfixed64Count() > 0) {
        hash = (37 * hash) + REP_SFIXED64_FIELD_NUMBER;
        hash = (53 * hash) + getRepSfixed64List().hashCode();
      }
      if (getRepBoolCount() > 0) {
        hash = (37 * hash) + REP_BOOL_FIELD_NUMBER;
        hash = (53 * hash) + getRepBoolList().hashCode();
      }
      if (getRepFloatCount() > 0) {
        hash = (37 * hash) + REP_FLOAT_FIELD_NUMBER;
        hash = (53 * hash) + getRepFloatList().hashCode();
      }
      if (getRepDoubleCount() > 0) {
        hash = (37 * hash) + REP_DOUBLE_FIELD_NUMBER;
        hash = (53 * hash) + getRepDoubleList().hashCode();
      }
      if (getRepStringCount() > 0) {
        hash = (37 * hash) + REP_STRING_FIELD_NUMBER;
        hash = (53 * hash) + getRepStringList().hashCode();
      }
      if (getRepBytesCount() > 0) {
        hash = (37 * hash) + REP_BYTES_FIELD_NUMBER;
        hash = (53 * hash) + getRepBytesList().hashCode();
      }
      if (getRepNestedEnumCount() > 0) {
        hash = (37 * hash) + REP_NESTED_ENUM_FIELD_NUMBER;
        hash = (53 * hash) + repNestedEnum_.hashCode();
      }
      if (getRepNestedMessageCount() > 0) {
        hash = (37 * hash) + REP_NESTED_MESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getRepNestedMessageList().hashCode();
      }
      if (!internalGetMapInt32Int32().getMap().isEmpty()) {
        hash = (37 * hash) + MAP_INT32_INT32_FIELD_NUMBER;
        hash = (53 * hash) + internalGetMapInt32Int32().hashCode();
      }
      if (!internalGetMapStringString().getMap().isEmpty()) {
        hash = (37 * hash) + MAP_STRING_STRING_FIELD_NUMBER;
        hash = (53 * hash) + internalGetMapStringString().hashCode();
      }
      if (!internalGetMapStringMessage().getMap().isEmpty()) {
        hash = (37 * hash) + MAP_STRING_MESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + internalGetMapStringMessage().hashCode();
      }
      if (!internalGetMapStringEnum().getMap().isEmpty()) {
        hash = (37 * hash) + MAP_STRING_ENUM_FIELD_NUMBER;
        hash = (53 * hash) + internalGetMapStringEnum().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static AllTypes parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AllTypes parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AllTypes parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AllTypes parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AllTypes parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AllTypes parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AllTypes parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static AllTypes parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static AllTypes parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static AllTypes parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static AllTypes parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static AllTypes parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(AllTypes prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code site.along101.proto.AllTypes}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:site.along101.proto.AllTypes)
        AllTypesOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return AllTypesOuterClass.internal_static_site_along101_proto_AllTypes_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 501:
            return internalGetMapInt32Int32();
          case 502:
            return internalGetMapStringString();
          case 503:
            return internalGetMapStringMessage();
          case 504:
            return internalGetMapStringEnum();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 501:
            return internalGetMutableMapInt32Int32();
          case 502:
            return internalGetMutableMapStringString();
          case 503:
            return internalGetMutableMapStringMessage();
          case 504:
            return internalGetMutableMapStringEnum();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return AllTypesOuterClass.internal_static_site_along101_proto_AllTypes_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                AllTypes.class, Builder.class);
      }

      // Construct using site.along101.proto.AllTypesOuterClass.AllTypes.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getRepNestedMessageFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        int32_ = 0;

        uint32_ = 0;

        sint32_ = 0;

        fixed32_ = 0;

        sfixed32_ = 0;

        int64_ = 0L;

        uint64_ = 0L;

        sint64_ = 0L;

        fixed64_ = 0L;

        sfixed64_ = 0L;

        bool_ = false;

        float_ = 0F;

        double_ = 0D;

        string_ = "";

        bytes_ = com.google.protobuf.ByteString.EMPTY;

        nestedEnum_ = 0;

        if (nestedMessageBuilder_ == null) {
          nestedMessage_ = null;
        } else {
          nestedMessage_ = null;
          nestedMessageBuilder_ = null;
        }
        repInt32_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        repUint32_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        repSint32_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        repFixed32_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        repSfixed32_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        repInt64_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        repUint64_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00800000);
        repSint64_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x01000000);
        repFixed64_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x02000000);
        repSfixed64_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x04000000);
        repBool_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x08000000);
        repFloat_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x10000000);
        repDouble_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x20000000);
        repString_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x40000000);
        repBytes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x80000000);
        repNestedEnum_ = java.util.Collections.emptyList();
        bitField1_ = (bitField1_ & ~0x00000001);
        if (repNestedMessageBuilder_ == null) {
          repNestedMessage_ = java.util.Collections.emptyList();
          bitField1_ = (bitField1_ & ~0x00000002);
        } else {
          repNestedMessageBuilder_.clear();
        }
        internalGetMutableMapInt32Int32().clear();
        internalGetMutableMapStringString().clear();
        internalGetMutableMapStringMessage().clear();
        internalGetMutableMapStringEnum().clear();
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return AllTypesOuterClass.internal_static_site_along101_proto_AllTypes_descriptor;
      }

      public AllTypes getDefaultInstanceForType() {
        return AllTypes.getDefaultInstance();
      }

      public AllTypes build() {
        AllTypes result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public AllTypes buildPartial() {
        AllTypes result = new AllTypes(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        result.int32_ = int32_;
        result.uint32_ = uint32_;
        result.sint32_ = sint32_;
        result.fixed32_ = fixed32_;
        result.sfixed32_ = sfixed32_;
        result.int64_ = int64_;
        result.uint64_ = uint64_;
        result.sint64_ = sint64_;
        result.fixed64_ = fixed64_;
        result.sfixed64_ = sfixed64_;
        result.bool_ = bool_;
        result.float_ = float_;
        result.double_ = double_;
        result.string_ = string_;
        result.bytes_ = bytes_;
        result.nestedEnum_ = nestedEnum_;
        if (nestedMessageBuilder_ == null) {
          result.nestedMessage_ = nestedMessage_;
        } else {
          result.nestedMessage_ = nestedMessageBuilder_.build();
        }
        if (((bitField0_ & 0x00020000) == 0x00020000)) {
          repInt32_ = java.util.Collections.unmodifiableList(repInt32_);
          bitField0_ = (bitField0_ & ~0x00020000);
        }
        result.repInt32_ = repInt32_;
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          repUint32_ = java.util.Collections.unmodifiableList(repUint32_);
          bitField0_ = (bitField0_ & ~0x00040000);
        }
        result.repUint32_ = repUint32_;
        if (((bitField0_ & 0x00080000) == 0x00080000)) {
          repSint32_ = java.util.Collections.unmodifiableList(repSint32_);
          bitField0_ = (bitField0_ & ~0x00080000);
        }
        result.repSint32_ = repSint32_;
        if (((bitField0_ & 0x00100000) == 0x00100000)) {
          repFixed32_ = java.util.Collections.unmodifiableList(repFixed32_);
          bitField0_ = (bitField0_ & ~0x00100000);
        }
        result.repFixed32_ = repFixed32_;
        if (((bitField0_ & 0x00200000) == 0x00200000)) {
          repSfixed32_ = java.util.Collections.unmodifiableList(repSfixed32_);
          bitField0_ = (bitField0_ & ~0x00200000);
        }
        result.repSfixed32_ = repSfixed32_;
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          repInt64_ = java.util.Collections.unmodifiableList(repInt64_);
          bitField0_ = (bitField0_ & ~0x00400000);
        }
        result.repInt64_ = repInt64_;
        if (((bitField0_ & 0x00800000) == 0x00800000)) {
          repUint64_ = java.util.Collections.unmodifiableList(repUint64_);
          bitField0_ = (bitField0_ & ~0x00800000);
        }
        result.repUint64_ = repUint64_;
        if (((bitField0_ & 0x01000000) == 0x01000000)) {
          repSint64_ = java.util.Collections.unmodifiableList(repSint64_);
          bitField0_ = (bitField0_ & ~0x01000000);
        }
        result.repSint64_ = repSint64_;
        if (((bitField0_ & 0x02000000) == 0x02000000)) {
          repFixed64_ = java.util.Collections.unmodifiableList(repFixed64_);
          bitField0_ = (bitField0_ & ~0x02000000);
        }
        result.repFixed64_ = repFixed64_;
        if (((bitField0_ & 0x04000000) == 0x04000000)) {
          repSfixed64_ = java.util.Collections.unmodifiableList(repSfixed64_);
          bitField0_ = (bitField0_ & ~0x04000000);
        }
        result.repSfixed64_ = repSfixed64_;
        if (((bitField0_ & 0x08000000) == 0x08000000)) {
          repBool_ = java.util.Collections.unmodifiableList(repBool_);
          bitField0_ = (bitField0_ & ~0x08000000);
        }
        result.repBool_ = repBool_;
        if (((bitField0_ & 0x10000000) == 0x10000000)) {
          repFloat_ = java.util.Collections.unmodifiableList(repFloat_);
          bitField0_ = (bitField0_ & ~0x10000000);
        }
        result.repFloat_ = repFloat_;
        if (((bitField0_ & 0x20000000) == 0x20000000)) {
          repDouble_ = java.util.Collections.unmodifiableList(repDouble_);
          bitField0_ = (bitField0_ & ~0x20000000);
        }
        result.repDouble_ = repDouble_;
        if (((bitField0_ & 0x40000000) == 0x40000000)) {
          repString_ = repString_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x40000000);
        }
        result.repString_ = repString_;
        if (((bitField0_ & 0x80000000) == 0x80000000)) {
          repBytes_ = java.util.Collections.unmodifiableList(repBytes_);
          bitField0_ = (bitField0_ & ~0x80000000);
        }
        result.repBytes_ = repBytes_;
        if (((bitField1_ & 0x00000001) == 0x00000001)) {
          repNestedEnum_ = java.util.Collections.unmodifiableList(repNestedEnum_);
          bitField1_ = (bitField1_ & ~0x00000001);
        }
        result.repNestedEnum_ = repNestedEnum_;
        if (repNestedMessageBuilder_ == null) {
          if (((bitField1_ & 0x00000002) == 0x00000002)) {
            repNestedMessage_ = java.util.Collections.unmodifiableList(repNestedMessage_);
            bitField1_ = (bitField1_ & ~0x00000002);
          }
          result.repNestedMessage_ = repNestedMessage_;
        } else {
          result.repNestedMessage_ = repNestedMessageBuilder_.build();
        }
        result.mapInt32Int32_ = internalGetMapInt32Int32();
        result.mapInt32Int32_.makeImmutable();
        result.mapStringString_ = internalGetMapStringString();
        result.mapStringString_.makeImmutable();
        result.mapStringMessage_ = internalGetMapStringMessage();
        result.mapStringMessage_.makeImmutable();
        result.mapStringEnum_ = internalGetMapStringEnum();
        result.mapStringEnum_.makeImmutable();
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof AllTypes) {
          return mergeFrom((AllTypes)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(AllTypes other) {
        if (other == AllTypes.getDefaultInstance()) return this;
        if (other.getInt32() != 0) {
          setInt32(other.getInt32());
        }
        if (other.getUint32() != 0) {
          setUint32(other.getUint32());
        }
        if (other.getSint32() != 0) {
          setSint32(other.getSint32());
        }
        if (other.getFixed32() != 0) {
          setFixed32(other.getFixed32());
        }
        if (other.getSfixed32() != 0) {
          setSfixed32(other.getSfixed32());
        }
        if (other.getInt64() != 0L) {
          setInt64(other.getInt64());
        }
        if (other.getUint64() != 0L) {
          setUint64(other.getUint64());
        }
        if (other.getSint64() != 0L) {
          setSint64(other.getSint64());
        }
        if (other.getFixed64() != 0L) {
          setFixed64(other.getFixed64());
        }
        if (other.getSfixed64() != 0L) {
          setSfixed64(other.getSfixed64());
        }
        if (other.getBool() != false) {
          setBool(other.getBool());
        }
        if (other.getFloat() != 0F) {
          setFloat(other.getFloat());
        }
        if (other.getDouble() != 0D) {
          setDouble(other.getDouble());
        }
        if (!other.getString().isEmpty()) {
          string_ = other.string_;
          onChanged();
        }
        if (other.getBytes() != com.google.protobuf.ByteString.EMPTY) {
          setBytes(other.getBytes());
        }
        if (other.nestedEnum_ != 0) {
          setNestedEnumValue(other.getNestedEnumValue());
        }
        if (other.hasNestedMessage()) {
          mergeNestedMessage(other.getNestedMessage());
        }
        if (!other.repInt32_.isEmpty()) {
          if (repInt32_.isEmpty()) {
            repInt32_ = other.repInt32_;
            bitField0_ = (bitField0_ & ~0x00020000);
          } else {
            ensureRepInt32IsMutable();
            repInt32_.addAll(other.repInt32_);
          }
          onChanged();
        }
        if (!other.repUint32_.isEmpty()) {
          if (repUint32_.isEmpty()) {
            repUint32_ = other.repUint32_;
            bitField0_ = (bitField0_ & ~0x00040000);
          } else {
            ensureRepUint32IsMutable();
            repUint32_.addAll(other.repUint32_);
          }
          onChanged();
        }
        if (!other.repSint32_.isEmpty()) {
          if (repSint32_.isEmpty()) {
            repSint32_ = other.repSint32_;
            bitField0_ = (bitField0_ & ~0x00080000);
          } else {
            ensureRepSint32IsMutable();
            repSint32_.addAll(other.repSint32_);
          }
          onChanged();
        }
        if (!other.repFixed32_.isEmpty()) {
          if (repFixed32_.isEmpty()) {
            repFixed32_ = other.repFixed32_;
            bitField0_ = (bitField0_ & ~0x00100000);
          } else {
            ensureRepFixed32IsMutable();
            repFixed32_.addAll(other.repFixed32_);
          }
          onChanged();
        }
        if (!other.repSfixed32_.isEmpty()) {
          if (repSfixed32_.isEmpty()) {
            repSfixed32_ = other.repSfixed32_;
            bitField0_ = (bitField0_ & ~0x00200000);
          } else {
            ensureRepSfixed32IsMutable();
            repSfixed32_.addAll(other.repSfixed32_);
          }
          onChanged();
        }
        if (!other.repInt64_.isEmpty()) {
          if (repInt64_.isEmpty()) {
            repInt64_ = other.repInt64_;
            bitField0_ = (bitField0_ & ~0x00400000);
          } else {
            ensureRepInt64IsMutable();
            repInt64_.addAll(other.repInt64_);
          }
          onChanged();
        }
        if (!other.repUint64_.isEmpty()) {
          if (repUint64_.isEmpty()) {
            repUint64_ = other.repUint64_;
            bitField0_ = (bitField0_ & ~0x00800000);
          } else {
            ensureRepUint64IsMutable();
            repUint64_.addAll(other.repUint64_);
          }
          onChanged();
        }
        if (!other.repSint64_.isEmpty()) {
          if (repSint64_.isEmpty()) {
            repSint64_ = other.repSint64_;
            bitField0_ = (bitField0_ & ~0x01000000);
          } else {
            ensureRepSint64IsMutable();
            repSint64_.addAll(other.repSint64_);
          }
          onChanged();
        }
        if (!other.repFixed64_.isEmpty()) {
          if (repFixed64_.isEmpty()) {
            repFixed64_ = other.repFixed64_;
            bitField0_ = (bitField0_ & ~0x02000000);
          } else {
            ensureRepFixed64IsMutable();
            repFixed64_.addAll(other.repFixed64_);
          }
          onChanged();
        }
        if (!other.repSfixed64_.isEmpty()) {
          if (repSfixed64_.isEmpty()) {
            repSfixed64_ = other.repSfixed64_;
            bitField0_ = (bitField0_ & ~0x04000000);
          } else {
            ensureRepSfixed64IsMutable();
            repSfixed64_.addAll(other.repSfixed64_);
          }
          onChanged();
        }
        if (!other.repBool_.isEmpty()) {
          if (repBool_.isEmpty()) {
            repBool_ = other.repBool_;
            bitField0_ = (bitField0_ & ~0x08000000);
          } else {
            ensureRepBoolIsMutable();
            repBool_.addAll(other.repBool_);
          }
          onChanged();
        }
        if (!other.repFloat_.isEmpty()) {
          if (repFloat_.isEmpty()) {
            repFloat_ = other.repFloat_;
            bitField0_ = (bitField0_ & ~0x10000000);
          } else {
            ensureRepFloatIsMutable();
            repFloat_.addAll(other.repFloat_);
          }
          onChanged();
        }
        if (!other.repDouble_.isEmpty()) {
          if (repDouble_.isEmpty()) {
            repDouble_ = other.repDouble_;
            bitField0_ = (bitField0_ & ~0x20000000);
          } else {
            ensureRepDoubleIsMutable();
            repDouble_.addAll(other.repDouble_);
          }
          onChanged();
        }
        if (!other.repString_.isEmpty()) {
          if (repString_.isEmpty()) {
            repString_ = other.repString_;
            bitField0_ = (bitField0_ & ~0x40000000);
          } else {
            ensureRepStringIsMutable();
            repString_.addAll(other.repString_);
          }
          onChanged();
        }
        if (!other.repBytes_.isEmpty()) {
          if (repBytes_.isEmpty()) {
            repBytes_ = other.repBytes_;
            bitField0_ = (bitField0_ & ~0x80000000);
          } else {
            ensureRepBytesIsMutable();
            repBytes_.addAll(other.repBytes_);
          }
          onChanged();
        }
        if (!other.repNestedEnum_.isEmpty()) {
          if (repNestedEnum_.isEmpty()) {
            repNestedEnum_ = other.repNestedEnum_;
            bitField1_ = (bitField1_ & ~0x00000001);
          } else {
            ensureRepNestedEnumIsMutable();
            repNestedEnum_.addAll(other.repNestedEnum_);
          }
          onChanged();
        }
        if (repNestedMessageBuilder_ == null) {
          if (!other.repNestedMessage_.isEmpty()) {
            if (repNestedMessage_.isEmpty()) {
              repNestedMessage_ = other.repNestedMessage_;
              bitField1_ = (bitField1_ & ~0x00000002);
            } else {
              ensureRepNestedMessageIsMutable();
              repNestedMessage_.addAll(other.repNestedMessage_);
            }
            onChanged();
          }
        } else {
          if (!other.repNestedMessage_.isEmpty()) {
            if (repNestedMessageBuilder_.isEmpty()) {
              repNestedMessageBuilder_.dispose();
              repNestedMessageBuilder_ = null;
              repNestedMessage_ = other.repNestedMessage_;
              bitField1_ = (bitField1_ & ~0x00000002);
              repNestedMessageBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getRepNestedMessageFieldBuilder() : null;
            } else {
              repNestedMessageBuilder_.addAllMessages(other.repNestedMessage_);
            }
          }
        }
        internalGetMutableMapInt32Int32().mergeFrom(
            other.internalGetMapInt32Int32());
        internalGetMutableMapStringString().mergeFrom(
            other.internalGetMapStringString());
        internalGetMutableMapStringMessage().mergeFrom(
            other.internalGetMapStringMessage());
        internalGetMutableMapStringEnum().mergeFrom(
            other.internalGetMapStringEnum());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        AllTypes parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (AllTypes) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      private int int32_ ;
      /**
       * <code>int32 int32 = 1;</code>
       */
      public int getInt32() {
        return int32_;
      }
      /**
       * <code>int32 int32 = 1;</code>
       */
      public Builder setInt32(int value) {
        
        int32_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 int32 = 1;</code>
       */
      public Builder clearInt32() {
        
        int32_ = 0;
        onChanged();
        return this;
      }

      private int uint32_ ;
      /**
       * <code>uint32 uint32 = 2;</code>
       */
      public int getUint32() {
        return uint32_;
      }
      /**
       * <code>uint32 uint32 = 2;</code>
       */
      public Builder setUint32(int value) {
        
        uint32_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 uint32 = 2;</code>
       */
      public Builder clearUint32() {
        
        uint32_ = 0;
        onChanged();
        return this;
      }

      private int sint32_ ;
      /**
       * <code>sint32 sint32 = 3;</code>
       */
      public int getSint32() {
        return sint32_;
      }
      /**
       * <code>sint32 sint32 = 3;</code>
       */
      public Builder setSint32(int value) {
        
        sint32_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>sint32 sint32 = 3;</code>
       */
      public Builder clearSint32() {
        
        sint32_ = 0;
        onChanged();
        return this;
      }

      private int fixed32_ ;
      /**
       * <code>fixed32 fixed32 = 4;</code>
       */
      public int getFixed32() {
        return fixed32_;
      }
      /**
       * <code>fixed32 fixed32 = 4;</code>
       */
      public Builder setFixed32(int value) {
        
        fixed32_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>fixed32 fixed32 = 4;</code>
       */
      public Builder clearFixed32() {
        
        fixed32_ = 0;
        onChanged();
        return this;
      }

      private int sfixed32_ ;
      /**
       * <code>sfixed32 sfixed32 = 5;</code>
       */
      public int getSfixed32() {
        return sfixed32_;
      }
      /**
       * <code>sfixed32 sfixed32 = 5;</code>
       */
      public Builder setSfixed32(int value) {
        
        sfixed32_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>sfixed32 sfixed32 = 5;</code>
       */
      public Builder clearSfixed32() {
        
        sfixed32_ = 0;
        onChanged();
        return this;
      }

      private long int64_ ;
      /**
       * <code>int64 int64 = 6;</code>
       */
      public long getInt64() {
        return int64_;
      }
      /**
       * <code>int64 int64 = 6;</code>
       */
      public Builder setInt64(long value) {
        
        int64_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 int64 = 6;</code>
       */
      public Builder clearInt64() {
        
        int64_ = 0L;
        onChanged();
        return this;
      }

      private long uint64_ ;
      /**
       * <code>uint64 uint64 = 7;</code>
       */
      public long getUint64() {
        return uint64_;
      }
      /**
       * <code>uint64 uint64 = 7;</code>
       */
      public Builder setUint64(long value) {
        
        uint64_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 uint64 = 7;</code>
       */
      public Builder clearUint64() {
        
        uint64_ = 0L;
        onChanged();
        return this;
      }

      private long sint64_ ;
      /**
       * <code>sint64 sint64 = 8;</code>
       */
      public long getSint64() {
        return sint64_;
      }
      /**
       * <code>sint64 sint64 = 8;</code>
       */
      public Builder setSint64(long value) {
        
        sint64_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>sint64 sint64 = 8;</code>
       */
      public Builder clearSint64() {
        
        sint64_ = 0L;
        onChanged();
        return this;
      }

      private long fixed64_ ;
      /**
       * <code>fixed64 fixed64 = 9;</code>
       */
      public long getFixed64() {
        return fixed64_;
      }
      /**
       * <code>fixed64 fixed64 = 9;</code>
       */
      public Builder setFixed64(long value) {
        
        fixed64_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>fixed64 fixed64 = 9;</code>
       */
      public Builder clearFixed64() {
        
        fixed64_ = 0L;
        onChanged();
        return this;
      }

      private long sfixed64_ ;
      /**
       * <code>sfixed64 sfixed64 = 10;</code>
       */
      public long getSfixed64() {
        return sfixed64_;
      }
      /**
       * <code>sfixed64 sfixed64 = 10;</code>
       */
      public Builder setSfixed64(long value) {
        
        sfixed64_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>sfixed64 sfixed64 = 10;</code>
       */
      public Builder clearSfixed64() {
        
        sfixed64_ = 0L;
        onChanged();
        return this;
      }

      private boolean bool_ ;
      /**
       * <code>bool bool = 11;</code>
       */
      public boolean getBool() {
        return bool_;
      }
      /**
       * <code>bool bool = 11;</code>
       */
      public Builder setBool(boolean value) {
        
        bool_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool bool = 11;</code>
       */
      public Builder clearBool() {
        
        bool_ = false;
        onChanged();
        return this;
      }

      private float float_ ;
      /**
       * <code>float float = 12;</code>
       */
      public float getFloat() {
        return float_;
      }
      /**
       * <code>float float = 12;</code>
       */
      public Builder setFloat(float value) {
        
        float_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>float float = 12;</code>
       */
      public Builder clearFloat() {
        
        float_ = 0F;
        onChanged();
        return this;
      }

      private double double_ ;
      /**
       * <code>double double = 13;</code>
       */
      public double getDouble() {
        return double_;
      }
      /**
       * <code>double double = 13;</code>
       */
      public Builder setDouble(double value) {
        
        double_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>double double = 13;</code>
       */
      public Builder clearDouble() {
        
        double_ = 0D;
        onChanged();
        return this;
      }

      private Object string_ = "";
      /**
       * <code>string string = 14;</code>
       */
      public String getString() {
        Object ref = string_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          string_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <code>string string = 14;</code>
       */
      public com.google.protobuf.ByteString
          getStringBytes() {
        Object ref = string_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          string_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string string = 14;</code>
       */
      public Builder setString(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        string_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string string = 14;</code>
       */
      public Builder clearString() {
        
        string_ = getDefaultInstance().getString();
        onChanged();
        return this;
      }
      /**
       * <code>string string = 14;</code>
       */
      public Builder setStringBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        string_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString bytes_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes bytes = 15;</code>
       */
      public com.google.protobuf.ByteString getBytes() {
        return bytes_;
      }
      /**
       * <code>bytes bytes = 15;</code>
       */
      public Builder setBytes(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        bytes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes bytes = 15;</code>
       */
      public Builder clearBytes() {
        
        bytes_ = getDefaultInstance().getBytes();
        onChanged();
        return this;
      }

      private int nestedEnum_ = 0;
      /**
       * <code>.site.along101.proto.AllTypes.NestedEnum nested_enum = 16;</code>
       */
      public int getNestedEnumValue() {
        return nestedEnum_;
      }
      /**
       * <code>.site.along101.proto.AllTypes.NestedEnum nested_enum = 16;</code>
       */
      public Builder setNestedEnumValue(int value) {
        nestedEnum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.site.along101.proto.AllTypes.NestedEnum nested_enum = 16;</code>
       */
      public NestedEnum getNestedEnum() {
        NestedEnum result = NestedEnum.valueOf(nestedEnum_);
        return result == null ? NestedEnum.UNRECOGNIZED : result;
      }
      /**
       * <code>.site.along101.proto.AllTypes.NestedEnum nested_enum = 16;</code>
       */
      public Builder setNestedEnum(NestedEnum value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        nestedEnum_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.site.along101.proto.AllTypes.NestedEnum nested_enum = 16;</code>
       */
      public Builder clearNestedEnum() {
        
        nestedEnum_ = 0;
        onChanged();
        return this;
      }

      private NestedMessage nestedMessage_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          NestedMessage, NestedMessage.Builder, NestedMessageOrBuilder> nestedMessageBuilder_;
      /**
       * <code>.site.along101.proto.AllTypes.NestedMessage nested_message = 17;</code>
       */
      public boolean hasNestedMessage() {
        return nestedMessageBuilder_ != null || nestedMessage_ != null;
      }
      /**
       * <code>.site.along101.proto.AllTypes.NestedMessage nested_message = 17;</code>
       */
      public NestedMessage getNestedMessage() {
        if (nestedMessageBuilder_ == null) {
          return nestedMessage_ == null ? NestedMessage.getDefaultInstance() : nestedMessage_;
        } else {
          return nestedMessageBuilder_.getMessage();
        }
      }
      /**
       * <code>.site.along101.proto.AllTypes.NestedMessage nested_message = 17;</code>
       */
      public Builder setNestedMessage(NestedMessage value) {
        if (nestedMessageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          nestedMessage_ = value;
          onChanged();
        } else {
          nestedMessageBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.site.along101.proto.AllTypes.NestedMessage nested_message = 17;</code>
       */
      public Builder setNestedMessage(
          NestedMessage.Builder builderForValue) {
        if (nestedMessageBuilder_ == null) {
          nestedMessage_ = builderForValue.build();
          onChanged();
        } else {
          nestedMessageBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.site.along101.proto.AllTypes.NestedMessage nested_message = 17;</code>
       */
      public Builder mergeNestedMessage(NestedMessage value) {
        if (nestedMessageBuilder_ == null) {
          if (nestedMessage_ != null) {
            nestedMessage_ =
              NestedMessage.newBuilder(nestedMessage_).mergeFrom(value).buildPartial();
          } else {
            nestedMessage_ = value;
          }
          onChanged();
        } else {
          nestedMessageBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.site.along101.proto.AllTypes.NestedMessage nested_message = 17;</code>
       */
      public Builder clearNestedMessage() {
        if (nestedMessageBuilder_ == null) {
          nestedMessage_ = null;
          onChanged();
        } else {
          nestedMessage_ = null;
          nestedMessageBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.site.along101.proto.AllTypes.NestedMessage nested_message = 17;</code>
       */
      public NestedMessage.Builder getNestedMessageBuilder() {
        
        onChanged();
        return getNestedMessageFieldBuilder().getBuilder();
      }
      /**
       * <code>.site.along101.proto.AllTypes.NestedMessage nested_message = 17;</code>
       */
      public NestedMessageOrBuilder getNestedMessageOrBuilder() {
        if (nestedMessageBuilder_ != null) {
          return nestedMessageBuilder_.getMessageOrBuilder();
        } else {
          return nestedMessage_ == null ?
              NestedMessage.getDefaultInstance() : nestedMessage_;
        }
      }
      /**
       * <code>.site.along101.proto.AllTypes.NestedMessage nested_message = 17;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          NestedMessage, NestedMessage.Builder, NestedMessageOrBuilder>
          getNestedMessageFieldBuilder() {
        if (nestedMessageBuilder_ == null) {
          nestedMessageBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              NestedMessage, NestedMessage.Builder, NestedMessageOrBuilder>(
                  getNestedMessage(),
                  getParentForChildren(),
                  isClean());
          nestedMessage_ = null;
        }
        return nestedMessageBuilder_;
      }

      private java.util.List<Integer> repInt32_ = java.util.Collections.emptyList();
      private void ensureRepInt32IsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          repInt32_ = new java.util.ArrayList<Integer>(repInt32_);
          bitField0_ |= 0x00020000;
         }
      }
      /**
       * <code>repeated int32 rep_int32 = 201;</code>
       */
      public java.util.List<Integer>
          getRepInt32List() {
        return java.util.Collections.unmodifiableList(repInt32_);
      }
      /**
       * <code>repeated int32 rep_int32 = 201;</code>
       */
      public int getRepInt32Count() {
        return repInt32_.size();
      }
      /**
       * <code>repeated int32 rep_int32 = 201;</code>
       */
      public int getRepInt32(int index) {
        return repInt32_.get(index);
      }
      /**
       * <code>repeated int32 rep_int32 = 201;</code>
       */
      public Builder setRepInt32(
          int index, int value) {
        ensureRepInt32IsMutable();
        repInt32_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 rep_int32 = 201;</code>
       */
      public Builder addRepInt32(int value) {
        ensureRepInt32IsMutable();
        repInt32_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 rep_int32 = 201;</code>
       */
      public Builder addAllRepInt32(
          Iterable<? extends Integer> values) {
        ensureRepInt32IsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, repInt32_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 rep_int32 = 201;</code>
       */
      public Builder clearRepInt32() {
        repInt32_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        onChanged();
        return this;
      }

      private java.util.List<Integer> repUint32_ = java.util.Collections.emptyList();
      private void ensureRepUint32IsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          repUint32_ = new java.util.ArrayList<Integer>(repUint32_);
          bitField0_ |= 0x00040000;
         }
      }
      /**
       * <code>repeated uint32 rep_uint32 = 202;</code>
       */
      public java.util.List<Integer>
          getRepUint32List() {
        return java.util.Collections.unmodifiableList(repUint32_);
      }
      /**
       * <code>repeated uint32 rep_uint32 = 202;</code>
       */
      public int getRepUint32Count() {
        return repUint32_.size();
      }
      /**
       * <code>repeated uint32 rep_uint32 = 202;</code>
       */
      public int getRepUint32(int index) {
        return repUint32_.get(index);
      }
      /**
       * <code>repeated uint32 rep_uint32 = 202;</code>
       */
      public Builder setRepUint32(
          int index, int value) {
        ensureRepUint32IsMutable();
        repUint32_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 rep_uint32 = 202;</code>
       */
      public Builder addRepUint32(int value) {
        ensureRepUint32IsMutable();
        repUint32_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 rep_uint32 = 202;</code>
       */
      public Builder addAllRepUint32(
          Iterable<? extends Integer> values) {
        ensureRepUint32IsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, repUint32_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 rep_uint32 = 202;</code>
       */
      public Builder clearRepUint32() {
        repUint32_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        onChanged();
        return this;
      }

      private java.util.List<Integer> repSint32_ = java.util.Collections.emptyList();
      private void ensureRepSint32IsMutable() {
        if (!((bitField0_ & 0x00080000) == 0x00080000)) {
          repSint32_ = new java.util.ArrayList<Integer>(repSint32_);
          bitField0_ |= 0x00080000;
         }
      }
      /**
       * <code>repeated sint32 rep_sint32 = 203;</code>
       */
      public java.util.List<Integer>
          getRepSint32List() {
        return java.util.Collections.unmodifiableList(repSint32_);
      }
      /**
       * <code>repeated sint32 rep_sint32 = 203;</code>
       */
      public int getRepSint32Count() {
        return repSint32_.size();
      }
      /**
       * <code>repeated sint32 rep_sint32 = 203;</code>
       */
      public int getRepSint32(int index) {
        return repSint32_.get(index);
      }
      /**
       * <code>repeated sint32 rep_sint32 = 203;</code>
       */
      public Builder setRepSint32(
          int index, int value) {
        ensureRepSint32IsMutable();
        repSint32_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 rep_sint32 = 203;</code>
       */
      public Builder addRepSint32(int value) {
        ensureRepSint32IsMutable();
        repSint32_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 rep_sint32 = 203;</code>
       */
      public Builder addAllRepSint32(
          Iterable<? extends Integer> values) {
        ensureRepSint32IsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, repSint32_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 rep_sint32 = 203;</code>
       */
      public Builder clearRepSint32() {
        repSint32_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        onChanged();
        return this;
      }

      private java.util.List<Integer> repFixed32_ = java.util.Collections.emptyList();
      private void ensureRepFixed32IsMutable() {
        if (!((bitField0_ & 0x00100000) == 0x00100000)) {
          repFixed32_ = new java.util.ArrayList<Integer>(repFixed32_);
          bitField0_ |= 0x00100000;
         }
      }
      /**
       * <code>repeated fixed32 rep_fixed32 = 204;</code>
       */
      public java.util.List<Integer>
          getRepFixed32List() {
        return java.util.Collections.unmodifiableList(repFixed32_);
      }
      /**
       * <code>repeated fixed32 rep_fixed32 = 204;</code>
       */
      public int getRepFixed32Count() {
        return repFixed32_.size();
      }
      /**
       * <code>repeated fixed32 rep_fixed32 = 204;</code>
       */
      public int getRepFixed32(int index) {
        return repFixed32_.get(index);
      }
      /**
       * <code>repeated fixed32 rep_fixed32 = 204;</code>
       */
      public Builder setRepFixed32(
          int index, int value) {
        ensureRepFixed32IsMutable();
        repFixed32_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed32 rep_fixed32 = 204;</code>
       */
      public Builder addRepFixed32(int value) {
        ensureRepFixed32IsMutable();
        repFixed32_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed32 rep_fixed32 = 204;</code>
       */
      public Builder addAllRepFixed32(
          Iterable<? extends Integer> values) {
        ensureRepFixed32IsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, repFixed32_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed32 rep_fixed32 = 204;</code>
       */
      public Builder clearRepFixed32() {
        repFixed32_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        onChanged();
        return this;
      }

      private java.util.List<Integer> repSfixed32_ = java.util.Collections.emptyList();
      private void ensureRepSfixed32IsMutable() {
        if (!((bitField0_ & 0x00200000) == 0x00200000)) {
          repSfixed32_ = new java.util.ArrayList<Integer>(repSfixed32_);
          bitField0_ |= 0x00200000;
         }
      }
      /**
       * <code>repeated sfixed32 rep_sfixed32 = 205;</code>
       */
      public java.util.List<Integer>
          getRepSfixed32List() {
        return java.util.Collections.unmodifiableList(repSfixed32_);
      }
      /**
       * <code>repeated sfixed32 rep_sfixed32 = 205;</code>
       */
      public int getRepSfixed32Count() {
        return repSfixed32_.size();
      }
      /**
       * <code>repeated sfixed32 rep_sfixed32 = 205;</code>
       */
      public int getRepSfixed32(int index) {
        return repSfixed32_.get(index);
      }
      /**
       * <code>repeated sfixed32 rep_sfixed32 = 205;</code>
       */
      public Builder setRepSfixed32(
          int index, int value) {
        ensureRepSfixed32IsMutable();
        repSfixed32_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sfixed32 rep_sfixed32 = 205;</code>
       */
      public Builder addRepSfixed32(int value) {
        ensureRepSfixed32IsMutable();
        repSfixed32_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sfixed32 rep_sfixed32 = 205;</code>
       */
      public Builder addAllRepSfixed32(
          Iterable<? extends Integer> values) {
        ensureRepSfixed32IsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, repSfixed32_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sfixed32 rep_sfixed32 = 205;</code>
       */
      public Builder clearRepSfixed32() {
        repSfixed32_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        onChanged();
        return this;
      }

      private java.util.List<Long> repInt64_ = java.util.Collections.emptyList();
      private void ensureRepInt64IsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          repInt64_ = new java.util.ArrayList<Long>(repInt64_);
          bitField0_ |= 0x00400000;
         }
      }
      /**
       * <code>repeated int64 rep_int64 = 206;</code>
       */
      public java.util.List<Long>
          getRepInt64List() {
        return java.util.Collections.unmodifiableList(repInt64_);
      }
      /**
       * <code>repeated int64 rep_int64 = 206;</code>
       */
      public int getRepInt64Count() {
        return repInt64_.size();
      }
      /**
       * <code>repeated int64 rep_int64 = 206;</code>
       */
      public long getRepInt64(int index) {
        return repInt64_.get(index);
      }
      /**
       * <code>repeated int64 rep_int64 = 206;</code>
       */
      public Builder setRepInt64(
          int index, long value) {
        ensureRepInt64IsMutable();
        repInt64_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 rep_int64 = 206;</code>
       */
      public Builder addRepInt64(long value) {
        ensureRepInt64IsMutable();
        repInt64_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 rep_int64 = 206;</code>
       */
      public Builder addAllRepInt64(
          Iterable<? extends Long> values) {
        ensureRepInt64IsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, repInt64_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 rep_int64 = 206;</code>
       */
      public Builder clearRepInt64() {
        repInt64_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        onChanged();
        return this;
      }

      private java.util.List<Long> repUint64_ = java.util.Collections.emptyList();
      private void ensureRepUint64IsMutable() {
        if (!((bitField0_ & 0x00800000) == 0x00800000)) {
          repUint64_ = new java.util.ArrayList<Long>(repUint64_);
          bitField0_ |= 0x00800000;
         }
      }
      /**
       * <code>repeated uint64 rep_uint64 = 207;</code>
       */
      public java.util.List<Long>
          getRepUint64List() {
        return java.util.Collections.unmodifiableList(repUint64_);
      }
      /**
       * <code>repeated uint64 rep_uint64 = 207;</code>
       */
      public int getRepUint64Count() {
        return repUint64_.size();
      }
      /**
       * <code>repeated uint64 rep_uint64 = 207;</code>
       */
      public long getRepUint64(int index) {
        return repUint64_.get(index);
      }
      /**
       * <code>repeated uint64 rep_uint64 = 207;</code>
       */
      public Builder setRepUint64(
          int index, long value) {
        ensureRepUint64IsMutable();
        repUint64_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 rep_uint64 = 207;</code>
       */
      public Builder addRepUint64(long value) {
        ensureRepUint64IsMutable();
        repUint64_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 rep_uint64 = 207;</code>
       */
      public Builder addAllRepUint64(
          Iterable<? extends Long> values) {
        ensureRepUint64IsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, repUint64_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 rep_uint64 = 207;</code>
       */
      public Builder clearRepUint64() {
        repUint64_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00800000);
        onChanged();
        return this;
      }

      private java.util.List<Long> repSint64_ = java.util.Collections.emptyList();
      private void ensureRepSint64IsMutable() {
        if (!((bitField0_ & 0x01000000) == 0x01000000)) {
          repSint64_ = new java.util.ArrayList<Long>(repSint64_);
          bitField0_ |= 0x01000000;
         }
      }
      /**
       * <code>repeated sint64 rep_sint64 = 208;</code>
       */
      public java.util.List<Long>
          getRepSint64List() {
        return java.util.Collections.unmodifiableList(repSint64_);
      }
      /**
       * <code>repeated sint64 rep_sint64 = 208;</code>
       */
      public int getRepSint64Count() {
        return repSint64_.size();
      }
      /**
       * <code>repeated sint64 rep_sint64 = 208;</code>
       */
      public long getRepSint64(int index) {
        return repSint64_.get(index);
      }
      /**
       * <code>repeated sint64 rep_sint64 = 208;</code>
       */
      public Builder setRepSint64(
          int index, long value) {
        ensureRepSint64IsMutable();
        repSint64_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint64 rep_sint64 = 208;</code>
       */
      public Builder addRepSint64(long value) {
        ensureRepSint64IsMutable();
        repSint64_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint64 rep_sint64 = 208;</code>
       */
      public Builder addAllRepSint64(
          Iterable<? extends Long> values) {
        ensureRepSint64IsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, repSint64_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint64 rep_sint64 = 208;</code>
       */
      public Builder clearRepSint64() {
        repSint64_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x01000000);
        onChanged();
        return this;
      }

      private java.util.List<Long> repFixed64_ = java.util.Collections.emptyList();
      private void ensureRepFixed64IsMutable() {
        if (!((bitField0_ & 0x02000000) == 0x02000000)) {
          repFixed64_ = new java.util.ArrayList<Long>(repFixed64_);
          bitField0_ |= 0x02000000;
         }
      }
      /**
       * <code>repeated fixed64 rep_fixed64 = 209;</code>
       */
      public java.util.List<Long>
          getRepFixed64List() {
        return java.util.Collections.unmodifiableList(repFixed64_);
      }
      /**
       * <code>repeated fixed64 rep_fixed64 = 209;</code>
       */
      public int getRepFixed64Count() {
        return repFixed64_.size();
      }
      /**
       * <code>repeated fixed64 rep_fixed64 = 209;</code>
       */
      public long getRepFixed64(int index) {
        return repFixed64_.get(index);
      }
      /**
       * <code>repeated fixed64 rep_fixed64 = 209;</code>
       */
      public Builder setRepFixed64(
          int index, long value) {
        ensureRepFixed64IsMutable();
        repFixed64_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed64 rep_fixed64 = 209;</code>
       */
      public Builder addRepFixed64(long value) {
        ensureRepFixed64IsMutable();
        repFixed64_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed64 rep_fixed64 = 209;</code>
       */
      public Builder addAllRepFixed64(
          Iterable<? extends Long> values) {
        ensureRepFixed64IsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, repFixed64_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed64 rep_fixed64 = 209;</code>
       */
      public Builder clearRepFixed64() {
        repFixed64_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x02000000);
        onChanged();
        return this;
      }

      private java.util.List<Long> repSfixed64_ = java.util.Collections.emptyList();
      private void ensureRepSfixed64IsMutable() {
        if (!((bitField0_ & 0x04000000) == 0x04000000)) {
          repSfixed64_ = new java.util.ArrayList<Long>(repSfixed64_);
          bitField0_ |= 0x04000000;
         }
      }
      /**
       * <code>repeated sfixed64 rep_sfixed64 = 210;</code>
       */
      public java.util.List<Long>
          getRepSfixed64List() {
        return java.util.Collections.unmodifiableList(repSfixed64_);
      }
      /**
       * <code>repeated sfixed64 rep_sfixed64 = 210;</code>
       */
      public int getRepSfixed64Count() {
        return repSfixed64_.size();
      }
      /**
       * <code>repeated sfixed64 rep_sfixed64 = 210;</code>
       */
      public long getRepSfixed64(int index) {
        return repSfixed64_.get(index);
      }
      /**
       * <code>repeated sfixed64 rep_sfixed64 = 210;</code>
       */
      public Builder setRepSfixed64(
          int index, long value) {
        ensureRepSfixed64IsMutable();
        repSfixed64_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sfixed64 rep_sfixed64 = 210;</code>
       */
      public Builder addRepSfixed64(long value) {
        ensureRepSfixed64IsMutable();
        repSfixed64_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sfixed64 rep_sfixed64 = 210;</code>
       */
      public Builder addAllRepSfixed64(
          Iterable<? extends Long> values) {
        ensureRepSfixed64IsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, repSfixed64_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sfixed64 rep_sfixed64 = 210;</code>
       */
      public Builder clearRepSfixed64() {
        repSfixed64_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x04000000);
        onChanged();
        return this;
      }

      private java.util.List<Boolean> repBool_ = java.util.Collections.emptyList();
      private void ensureRepBoolIsMutable() {
        if (!((bitField0_ & 0x08000000) == 0x08000000)) {
          repBool_ = new java.util.ArrayList<Boolean>(repBool_);
          bitField0_ |= 0x08000000;
         }
      }
      /**
       * <code>repeated bool rep_bool = 211;</code>
       */
      public java.util.List<Boolean>
          getRepBoolList() {
        return java.util.Collections.unmodifiableList(repBool_);
      }
      /**
       * <code>repeated bool rep_bool = 211;</code>
       */
      public int getRepBoolCount() {
        return repBool_.size();
      }
      /**
       * <code>repeated bool rep_bool = 211;</code>
       */
      public boolean getRepBool(int index) {
        return repBool_.get(index);
      }
      /**
       * <code>repeated bool rep_bool = 211;</code>
       */
      public Builder setRepBool(
          int index, boolean value) {
        ensureRepBoolIsMutable();
        repBool_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool rep_bool = 211;</code>
       */
      public Builder addRepBool(boolean value) {
        ensureRepBoolIsMutable();
        repBool_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool rep_bool = 211;</code>
       */
      public Builder addAllRepBool(
          Iterable<? extends Boolean> values) {
        ensureRepBoolIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, repBool_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool rep_bool = 211;</code>
       */
      public Builder clearRepBool() {
        repBool_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x08000000);
        onChanged();
        return this;
      }

      private java.util.List<Float> repFloat_ = java.util.Collections.emptyList();
      private void ensureRepFloatIsMutable() {
        if (!((bitField0_ & 0x10000000) == 0x10000000)) {
          repFloat_ = new java.util.ArrayList<Float>(repFloat_);
          bitField0_ |= 0x10000000;
         }
      }
      /**
       * <code>repeated float rep_float = 212;</code>
       */
      public java.util.List<Float>
          getRepFloatList() {
        return java.util.Collections.unmodifiableList(repFloat_);
      }
      /**
       * <code>repeated float rep_float = 212;</code>
       */
      public int getRepFloatCount() {
        return repFloat_.size();
      }
      /**
       * <code>repeated float rep_float = 212;</code>
       */
      public float getRepFloat(int index) {
        return repFloat_.get(index);
      }
      /**
       * <code>repeated float rep_float = 212;</code>
       */
      public Builder setRepFloat(
          int index, float value) {
        ensureRepFloatIsMutable();
        repFloat_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float rep_float = 212;</code>
       */
      public Builder addRepFloat(float value) {
        ensureRepFloatIsMutable();
        repFloat_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float rep_float = 212;</code>
       */
      public Builder addAllRepFloat(
          Iterable<? extends Float> values) {
        ensureRepFloatIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, repFloat_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float rep_float = 212;</code>
       */
      public Builder clearRepFloat() {
        repFloat_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x10000000);
        onChanged();
        return this;
      }

      private java.util.List<Double> repDouble_ = java.util.Collections.emptyList();
      private void ensureRepDoubleIsMutable() {
        if (!((bitField0_ & 0x20000000) == 0x20000000)) {
          repDouble_ = new java.util.ArrayList<Double>(repDouble_);
          bitField0_ |= 0x20000000;
         }
      }
      /**
       * <code>repeated double rep_double = 213;</code>
       */
      public java.util.List<Double>
          getRepDoubleList() {
        return java.util.Collections.unmodifiableList(repDouble_);
      }
      /**
       * <code>repeated double rep_double = 213;</code>
       */
      public int getRepDoubleCount() {
        return repDouble_.size();
      }
      /**
       * <code>repeated double rep_double = 213;</code>
       */
      public double getRepDouble(int index) {
        return repDouble_.get(index);
      }
      /**
       * <code>repeated double rep_double = 213;</code>
       */
      public Builder setRepDouble(
          int index, double value) {
        ensureRepDoubleIsMutable();
        repDouble_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double rep_double = 213;</code>
       */
      public Builder addRepDouble(double value) {
        ensureRepDoubleIsMutable();
        repDouble_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double rep_double = 213;</code>
       */
      public Builder addAllRepDouble(
          Iterable<? extends Double> values) {
        ensureRepDoubleIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, repDouble_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double rep_double = 213;</code>
       */
      public Builder clearRepDouble() {
        repDouble_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x20000000);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList repString_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureRepStringIsMutable() {
        if (!((bitField0_ & 0x40000000) == 0x40000000)) {
          repString_ = new com.google.protobuf.LazyStringArrayList(repString_);
          bitField0_ |= 0x40000000;
         }
      }
      /**
       * <code>repeated string rep_string = 214;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getRepStringList() {
        return repString_.getUnmodifiableView();
      }
      /**
       * <code>repeated string rep_string = 214;</code>
       */
      public int getRepStringCount() {
        return repString_.size();
      }
      /**
       * <code>repeated string rep_string = 214;</code>
       */
      public String getRepString(int index) {
        return repString_.get(index);
      }
      /**
       * <code>repeated string rep_string = 214;</code>
       */
      public com.google.protobuf.ByteString
          getRepStringBytes(int index) {
        return repString_.getByteString(index);
      }
      /**
       * <code>repeated string rep_string = 214;</code>
       */
      public Builder setRepString(
          int index, String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureRepStringIsMutable();
        repString_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string rep_string = 214;</code>
       */
      public Builder addRepString(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureRepStringIsMutable();
        repString_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string rep_string = 214;</code>
       */
      public Builder addAllRepString(
          Iterable<String> values) {
        ensureRepStringIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, repString_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string rep_string = 214;</code>
       */
      public Builder clearRepString() {
        repString_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x40000000);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string rep_string = 214;</code>
       */
      public Builder addRepStringBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureRepStringIsMutable();
        repString_.add(value);
        onChanged();
        return this;
      }

      private java.util.List<com.google.protobuf.ByteString> repBytes_ = java.util.Collections.emptyList();
      private void ensureRepBytesIsMutable() {
        if (!((bitField0_ & 0x80000000) == 0x80000000)) {
          repBytes_ = new java.util.ArrayList<com.google.protobuf.ByteString>(repBytes_);
          bitField0_ |= 0x80000000;
         }
      }
      /**
       * <code>repeated bytes rep_bytes = 215;</code>
       */
      public java.util.List<com.google.protobuf.ByteString>
          getRepBytesList() {
        return java.util.Collections.unmodifiableList(repBytes_);
      }
      /**
       * <code>repeated bytes rep_bytes = 215;</code>
       */
      public int getRepBytesCount() {
        return repBytes_.size();
      }
      /**
       * <code>repeated bytes rep_bytes = 215;</code>
       */
      public com.google.protobuf.ByteString getRepBytes(int index) {
        return repBytes_.get(index);
      }
      /**
       * <code>repeated bytes rep_bytes = 215;</code>
       */
      public Builder setRepBytes(
          int index, com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureRepBytesIsMutable();
        repBytes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes rep_bytes = 215;</code>
       */
      public Builder addRepBytes(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureRepBytesIsMutable();
        repBytes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes rep_bytes = 215;</code>
       */
      public Builder addAllRepBytes(
          Iterable<? extends com.google.protobuf.ByteString> values) {
        ensureRepBytesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, repBytes_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes rep_bytes = 215;</code>
       */
      public Builder clearRepBytes() {
        repBytes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x80000000);
        onChanged();
        return this;
      }

      private java.util.List<Integer> repNestedEnum_ =
        java.util.Collections.emptyList();
      private void ensureRepNestedEnumIsMutable() {
        if (!((bitField1_ & 0x00000001) == 0x00000001)) {
          repNestedEnum_ = new java.util.ArrayList<Integer>(repNestedEnum_);
          bitField1_ |= 0x00000001;
        }
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedEnum rep_nested_enum = 216;</code>
       */
      public java.util.List<NestedEnum> getRepNestedEnumList() {
        return new com.google.protobuf.Internal.ListAdapter<
            Integer, NestedEnum>(repNestedEnum_, repNestedEnum_converter_);
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedEnum rep_nested_enum = 216;</code>
       */
      public int getRepNestedEnumCount() {
        return repNestedEnum_.size();
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedEnum rep_nested_enum = 216;</code>
       */
      public NestedEnum getRepNestedEnum(int index) {
        return repNestedEnum_converter_.convert(repNestedEnum_.get(index));
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedEnum rep_nested_enum = 216;</code>
       */
      public Builder setRepNestedEnum(
          int index, NestedEnum value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRepNestedEnumIsMutable();
        repNestedEnum_.set(index, value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedEnum rep_nested_enum = 216;</code>
       */
      public Builder addRepNestedEnum(NestedEnum value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRepNestedEnumIsMutable();
        repNestedEnum_.add(value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedEnum rep_nested_enum = 216;</code>
       */
      public Builder addAllRepNestedEnum(
          Iterable<? extends NestedEnum> values) {
        ensureRepNestedEnumIsMutable();
        for (NestedEnum value : values) {
          repNestedEnum_.add(value.getNumber());
        }
        onChanged();
        return this;
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedEnum rep_nested_enum = 216;</code>
       */
      public Builder clearRepNestedEnum() {
        repNestedEnum_ = java.util.Collections.emptyList();
        bitField1_ = (bitField1_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedEnum rep_nested_enum = 216;</code>
       */
      public java.util.List<Integer>
      getRepNestedEnumValueList() {
        return java.util.Collections.unmodifiableList(repNestedEnum_);
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedEnum rep_nested_enum = 216;</code>
       */
      public int getRepNestedEnumValue(int index) {
        return repNestedEnum_.get(index);
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedEnum rep_nested_enum = 216;</code>
       */
      public Builder setRepNestedEnumValue(
          int index, int value) {
        ensureRepNestedEnumIsMutable();
        repNestedEnum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedEnum rep_nested_enum = 216;</code>
       */
      public Builder addRepNestedEnumValue(int value) {
        ensureRepNestedEnumIsMutable();
        repNestedEnum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedEnum rep_nested_enum = 216;</code>
       */
      public Builder addAllRepNestedEnumValue(
          Iterable<Integer> values) {
        ensureRepNestedEnumIsMutable();
        for (int value : values) {
          repNestedEnum_.add(value);
        }
        onChanged();
        return this;
      }

      private java.util.List<NestedMessage> repNestedMessage_ =
        java.util.Collections.emptyList();
      private void ensureRepNestedMessageIsMutable() {
        if (!((bitField1_ & 0x00000002) == 0x00000002)) {
          repNestedMessage_ = new java.util.ArrayList<NestedMessage>(repNestedMessage_);
          bitField1_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          NestedMessage, NestedMessage.Builder, NestedMessageOrBuilder> repNestedMessageBuilder_;

      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
       */
      public java.util.List<NestedMessage> getRepNestedMessageList() {
        if (repNestedMessageBuilder_ == null) {
          return java.util.Collections.unmodifiableList(repNestedMessage_);
        } else {
          return repNestedMessageBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
       */
      public int getRepNestedMessageCount() {
        if (repNestedMessageBuilder_ == null) {
          return repNestedMessage_.size();
        } else {
          return repNestedMessageBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
       */
      public NestedMessage getRepNestedMessage(int index) {
        if (repNestedMessageBuilder_ == null) {
          return repNestedMessage_.get(index);
        } else {
          return repNestedMessageBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
       */
      public Builder setRepNestedMessage(
          int index, NestedMessage value) {
        if (repNestedMessageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRepNestedMessageIsMutable();
          repNestedMessage_.set(index, value);
          onChanged();
        } else {
          repNestedMessageBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
       */
      public Builder setRepNestedMessage(
          int index, NestedMessage.Builder builderForValue) {
        if (repNestedMessageBuilder_ == null) {
          ensureRepNestedMessageIsMutable();
          repNestedMessage_.set(index, builderForValue.build());
          onChanged();
        } else {
          repNestedMessageBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
       */
      public Builder addRepNestedMessage(NestedMessage value) {
        if (repNestedMessageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRepNestedMessageIsMutable();
          repNestedMessage_.add(value);
          onChanged();
        } else {
          repNestedMessageBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
       */
      public Builder addRepNestedMessage(
          int index, NestedMessage value) {
        if (repNestedMessageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRepNestedMessageIsMutable();
          repNestedMessage_.add(index, value);
          onChanged();
        } else {
          repNestedMessageBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
       */
      public Builder addRepNestedMessage(
          NestedMessage.Builder builderForValue) {
        if (repNestedMessageBuilder_ == null) {
          ensureRepNestedMessageIsMutable();
          repNestedMessage_.add(builderForValue.build());
          onChanged();
        } else {
          repNestedMessageBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
       */
      public Builder addRepNestedMessage(
          int index, NestedMessage.Builder builderForValue) {
        if (repNestedMessageBuilder_ == null) {
          ensureRepNestedMessageIsMutable();
          repNestedMessage_.add(index, builderForValue.build());
          onChanged();
        } else {
          repNestedMessageBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
       */
      public Builder addAllRepNestedMessage(
          Iterable<? extends NestedMessage> values) {
        if (repNestedMessageBuilder_ == null) {
          ensureRepNestedMessageIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, repNestedMessage_);
          onChanged();
        } else {
          repNestedMessageBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
       */
      public Builder clearRepNestedMessage() {
        if (repNestedMessageBuilder_ == null) {
          repNestedMessage_ = java.util.Collections.emptyList();
          bitField1_ = (bitField1_ & ~0x00000002);
          onChanged();
        } else {
          repNestedMessageBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
       */
      public Builder removeRepNestedMessage(int index) {
        if (repNestedMessageBuilder_ == null) {
          ensureRepNestedMessageIsMutable();
          repNestedMessage_.remove(index);
          onChanged();
        } else {
          repNestedMessageBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
       */
      public NestedMessage.Builder getRepNestedMessageBuilder(
          int index) {
        return getRepNestedMessageFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
       */
      public NestedMessageOrBuilder getRepNestedMessageOrBuilder(
          int index) {
        if (repNestedMessageBuilder_ == null) {
          return repNestedMessage_.get(index);  } else {
          return repNestedMessageBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
       */
      public java.util.List<? extends NestedMessageOrBuilder>
           getRepNestedMessageOrBuilderList() {
        if (repNestedMessageBuilder_ != null) {
          return repNestedMessageBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(repNestedMessage_);
        }
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
       */
      public NestedMessage.Builder addRepNestedMessageBuilder() {
        return getRepNestedMessageFieldBuilder().addBuilder(
            NestedMessage.getDefaultInstance());
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
       */
      public NestedMessage.Builder addRepNestedMessageBuilder(
          int index) {
        return getRepNestedMessageFieldBuilder().addBuilder(
            index, NestedMessage.getDefaultInstance());
      }
      /**
       * <code>repeated .site.along101.proto.AllTypes.NestedMessage rep_nested_message = 217;</code>
       */
      public java.util.List<NestedMessage.Builder>
           getRepNestedMessageBuilderList() {
        return getRepNestedMessageFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          NestedMessage, NestedMessage.Builder, NestedMessageOrBuilder>
          getRepNestedMessageFieldBuilder() {
        if (repNestedMessageBuilder_ == null) {
          repNestedMessageBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              NestedMessage, NestedMessage.Builder, NestedMessageOrBuilder>(
                  repNestedMessage_,
                  ((bitField1_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          repNestedMessage_ = null;
        }
        return repNestedMessageBuilder_;
      }

      private com.google.protobuf.MapField<
          Integer, Integer> mapInt32Int32_;
      private com.google.protobuf.MapField<Integer, Integer>
      internalGetMapInt32Int32() {
        if (mapInt32Int32_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              MapInt32Int32DefaultEntryHolder.defaultEntry);
        }
        return mapInt32Int32_;
      }
      private com.google.protobuf.MapField<Integer, Integer>
      internalGetMutableMapInt32Int32() {
        onChanged();;
        if (mapInt32Int32_ == null) {
          mapInt32Int32_ = com.google.protobuf.MapField.newMapField(
              MapInt32Int32DefaultEntryHolder.defaultEntry);
        }
        if (!mapInt32Int32_.isMutable()) {
          mapInt32Int32_ = mapInt32Int32_.copy();
        }
        return mapInt32Int32_;
      }

      public int getMapInt32Int32Count() {
        return internalGetMapInt32Int32().getMap().size();
      }
      /**
       * <code>map&lt;int32, int32&gt; map_int32_int32 = 501;</code>
       */

      public boolean containsMapInt32Int32(
          int key) {
        
        return internalGetMapInt32Int32().getMap().containsKey(key);
      }
      /**
       * Use {@link #getMapInt32Int32Map()} instead.
       */
      @Deprecated
      public java.util.Map<Integer, Integer> getMapInt32Int32() {
        return getMapInt32Int32Map();
      }
      /**
       * <code>map&lt;int32, int32&gt; map_int32_int32 = 501;</code>
       */

      public java.util.Map<Integer, Integer> getMapInt32Int32Map() {
        return internalGetMapInt32Int32().getMap();
      }
      /**
       * <code>map&lt;int32, int32&gt; map_int32_int32 = 501;</code>
       */

      public int getMapInt32Int32OrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<Integer, Integer> map =
            internalGetMapInt32Int32().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, int32&gt; map_int32_int32 = 501;</code>
       */

      public int getMapInt32Int32OrThrow(
          int key) {
        
        java.util.Map<Integer, Integer> map =
            internalGetMapInt32Int32().getMap();
        if (!map.containsKey(key)) {
          throw new IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearMapInt32Int32() {
        internalGetMutableMapInt32Int32().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;int32, int32&gt; map_int32_int32 = 501;</code>
       */

      public Builder removeMapInt32Int32(
          int key) {
        
        internalGetMutableMapInt32Int32().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @Deprecated
      public java.util.Map<Integer, Integer>
      getMutableMapInt32Int32() {
        return internalGetMutableMapInt32Int32().getMutableMap();
      }
      /**
       * <code>map&lt;int32, int32&gt; map_int32_int32 = 501;</code>
       */
      public Builder putMapInt32Int32(
          int key,
          int value) {
        
        
        internalGetMutableMapInt32Int32().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, int32&gt; map_int32_int32 = 501;</code>
       */

      public Builder putAllMapInt32Int32(
          java.util.Map<Integer, Integer> values) {
        internalGetMutableMapInt32Int32().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          String, String> mapStringString_;
      private com.google.protobuf.MapField<String, String>
      internalGetMapStringString() {
        if (mapStringString_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              MapStringStringDefaultEntryHolder.defaultEntry);
        }
        return mapStringString_;
      }
      private com.google.protobuf.MapField<String, String>
      internalGetMutableMapStringString() {
        onChanged();;
        if (mapStringString_ == null) {
          mapStringString_ = com.google.protobuf.MapField.newMapField(
              MapStringStringDefaultEntryHolder.defaultEntry);
        }
        if (!mapStringString_.isMutable()) {
          mapStringString_ = mapStringString_.copy();
        }
        return mapStringString_;
      }

      public int getMapStringStringCount() {
        return internalGetMapStringString().getMap().size();
      }
      /**
       * <code>map&lt;string, string&gt; map_string_string = 502;</code>
       */

      public boolean containsMapStringString(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        return internalGetMapStringString().getMap().containsKey(key);
      }
      /**
       * Use {@link #getMapStringStringMap()} instead.
       */
      @Deprecated
      public java.util.Map<String, String> getMapStringString() {
        return getMapStringStringMap();
      }
      /**
       * <code>map&lt;string, string&gt; map_string_string = 502;</code>
       */

      public java.util.Map<String, String> getMapStringStringMap() {
        return internalGetMapStringString().getMap();
      }
      /**
       * <code>map&lt;string, string&gt; map_string_string = 502;</code>
       */

      public String getMapStringStringOrDefault(
          String key,
          String defaultValue) {
        if (key == null) { throw new NullPointerException(); }
        java.util.Map<String, String> map =
            internalGetMapStringString().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, string&gt; map_string_string = 502;</code>
       */

      public String getMapStringStringOrThrow(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        java.util.Map<String, String> map =
            internalGetMapStringString().getMap();
        if (!map.containsKey(key)) {
          throw new IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearMapStringString() {
        internalGetMutableMapStringString().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; map_string_string = 502;</code>
       */

      public Builder removeMapStringString(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        internalGetMutableMapStringString().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @Deprecated
      public java.util.Map<String, String>
      getMutableMapStringString() {
        return internalGetMutableMapStringString().getMutableMap();
      }
      /**
       * <code>map&lt;string, string&gt; map_string_string = 502;</code>
       */
      public Builder putMapStringString(
          String key,
          String value) {
        if (key == null) { throw new NullPointerException(); }
        if (value == null) { throw new NullPointerException(); }
        internalGetMutableMapStringString().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; map_string_string = 502;</code>
       */

      public Builder putAllMapStringString(
          java.util.Map<String, String> values) {
        internalGetMutableMapStringString().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          String, NestedMessage> mapStringMessage_;
      private com.google.protobuf.MapField<String, NestedMessage>
      internalGetMapStringMessage() {
        if (mapStringMessage_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              MapStringMessageDefaultEntryHolder.defaultEntry);
        }
        return mapStringMessage_;
      }
      private com.google.protobuf.MapField<String, NestedMessage>
      internalGetMutableMapStringMessage() {
        onChanged();;
        if (mapStringMessage_ == null) {
          mapStringMessage_ = com.google.protobuf.MapField.newMapField(
              MapStringMessageDefaultEntryHolder.defaultEntry);
        }
        if (!mapStringMessage_.isMutable()) {
          mapStringMessage_ = mapStringMessage_.copy();
        }
        return mapStringMessage_;
      }

      public int getMapStringMessageCount() {
        return internalGetMapStringMessage().getMap().size();
      }
      /**
       * <code>map&lt;string, .site.along101.proto.AllTypes.NestedMessage&gt; map_string_message = 503;</code>
       */

      public boolean containsMapStringMessage(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        return internalGetMapStringMessage().getMap().containsKey(key);
      }
      /**
       * Use {@link #getMapStringMessageMap()} instead.
       */
      @Deprecated
      public java.util.Map<String, NestedMessage> getMapStringMessage() {
        return getMapStringMessageMap();
      }
      /**
       * <code>map&lt;string, .site.along101.proto.AllTypes.NestedMessage&gt; map_string_message = 503;</code>
       */

      public java.util.Map<String, NestedMessage> getMapStringMessageMap() {
        return internalGetMapStringMessage().getMap();
      }
      /**
       * <code>map&lt;string, .site.along101.proto.AllTypes.NestedMessage&gt; map_string_message = 503;</code>
       */

      public NestedMessage getMapStringMessageOrDefault(
          String key,
          NestedMessage defaultValue) {
        if (key == null) { throw new NullPointerException(); }
        java.util.Map<String, NestedMessage> map =
            internalGetMapStringMessage().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, .site.along101.proto.AllTypes.NestedMessage&gt; map_string_message = 503;</code>
       */

      public NestedMessage getMapStringMessageOrThrow(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        java.util.Map<String, NestedMessage> map =
            internalGetMapStringMessage().getMap();
        if (!map.containsKey(key)) {
          throw new IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearMapStringMessage() {
        internalGetMutableMapStringMessage().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, .site.along101.proto.AllTypes.NestedMessage&gt; map_string_message = 503;</code>
       */

      public Builder removeMapStringMessage(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        internalGetMutableMapStringMessage().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @Deprecated
      public java.util.Map<String, NestedMessage>
      getMutableMapStringMessage() {
        return internalGetMutableMapStringMessage().getMutableMap();
      }
      /**
       * <code>map&lt;string, .site.along101.proto.AllTypes.NestedMessage&gt; map_string_message = 503;</code>
       */
      public Builder putMapStringMessage(
          String key,
          NestedMessage value) {
        if (key == null) { throw new NullPointerException(); }
        if (value == null) { throw new NullPointerException(); }
        internalGetMutableMapStringMessage().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, .site.along101.proto.AllTypes.NestedMessage&gt; map_string_message = 503;</code>
       */

      public Builder putAllMapStringMessage(
          java.util.Map<String, NestedMessage> values) {
        internalGetMutableMapStringMessage().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          String, Integer> mapStringEnum_;
      private com.google.protobuf.MapField<String, Integer>
      internalGetMapStringEnum() {
        if (mapStringEnum_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              MapStringEnumDefaultEntryHolder.defaultEntry);
        }
        return mapStringEnum_;
      }
      private com.google.protobuf.MapField<String, Integer>
      internalGetMutableMapStringEnum() {
        onChanged();;
        if (mapStringEnum_ == null) {
          mapStringEnum_ = com.google.protobuf.MapField.newMapField(
              MapStringEnumDefaultEntryHolder.defaultEntry);
        }
        if (!mapStringEnum_.isMutable()) {
          mapStringEnum_ = mapStringEnum_.copy();
        }
        return mapStringEnum_;
      }

      public int getMapStringEnumCount() {
        return internalGetMapStringEnum().getMap().size();
      }
      /**
       * <code>map&lt;string, .site.along101.proto.AllTypes.NestedEnum&gt; map_string_enum = 504;</code>
       */

      public boolean containsMapStringEnum(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        return internalGetMapStringEnum().getMap().containsKey(key);
      }
      /**
       * Use {@link #getMapStringEnumMap()} instead.
       */
      @Deprecated
      public java.util.Map<String, NestedEnum>
      getMapStringEnum() {
        return getMapStringEnumMap();
      }
      /**
       * <code>map&lt;string, .site.along101.proto.AllTypes.NestedEnum&gt; map_string_enum = 504;</code>
       */

      public java.util.Map<String, NestedEnum>
      getMapStringEnumMap() {
        return internalGetAdaptedMapStringEnumMap(
            internalGetMapStringEnum().getMap());}
      /**
       * <code>map&lt;string, .site.along101.proto.AllTypes.NestedEnum&gt; map_string_enum = 504;</code>
       */

      public NestedEnum getMapStringEnumOrDefault(
          String key,
          NestedEnum defaultValue) {
        if (key == null) { throw new NullPointerException(); }
        java.util.Map<String, Integer> map =
            internalGetMapStringEnum().getMap();
        return map.containsKey(key)
               ? mapStringEnumValueConverter.doForward(map.get(key))
               : defaultValue;
      }
      /**
       * <code>map&lt;string, .site.along101.proto.AllTypes.NestedEnum&gt; map_string_enum = 504;</code>
       */

      public NestedEnum getMapStringEnumOrThrow(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        java.util.Map<String, Integer> map =
            internalGetMapStringEnum().getMap();
        if (!map.containsKey(key)) {
          throw new IllegalArgumentException();
        }
        return mapStringEnumValueConverter.doForward(map.get(key));
      }
      /**
       * Use {@link #getMapStringEnumValueMap()} instead.
       */
      @Deprecated
      public java.util.Map<String, Integer>
      getMapStringEnumValue() {
        return getMapStringEnumValueMap();
      }
      /**
       * <code>map&lt;string, .site.along101.proto.AllTypes.NestedEnum&gt; map_string_enum = 504;</code>
       */

      public java.util.Map<String, Integer>
      getMapStringEnumValueMap() {
        return internalGetMapStringEnum().getMap();
      }
      /**
       * <code>map&lt;string, .site.along101.proto.AllTypes.NestedEnum&gt; map_string_enum = 504;</code>
       */

      public int getMapStringEnumValueOrDefault(
          String key,
          int defaultValue) {
        if (key == null) { throw new NullPointerException(); }
        java.util.Map<String, Integer> map =
            internalGetMapStringEnum().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, .site.along101.proto.AllTypes.NestedEnum&gt; map_string_enum = 504;</code>
       */

      public int getMapStringEnumValueOrThrow(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        java.util.Map<String, Integer> map =
            internalGetMapStringEnum().getMap();
        if (!map.containsKey(key)) {
          throw new IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearMapStringEnum() {
        internalGetMutableMapStringEnum().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, .site.along101.proto.AllTypes.NestedEnum&gt; map_string_enum = 504;</code>
       */

      public Builder removeMapStringEnum(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        internalGetMutableMapStringEnum().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @Deprecated
      public java.util.Map<String, NestedEnum>
      getMutableMapStringEnum() {
        return internalGetAdaptedMapStringEnumMap(
             internalGetMutableMapStringEnum().getMutableMap());
      }
      /**
       * <code>map&lt;string, .site.along101.proto.AllTypes.NestedEnum&gt; map_string_enum = 504;</code>
       */
      public Builder putMapStringEnum(
          String key,
          NestedEnum value) {
        if (key == null) { throw new NullPointerException(); }
        if (value == null) { throw new NullPointerException(); }
        internalGetMutableMapStringEnum().getMutableMap()
            .put(key, mapStringEnumValueConverter.doBackward(value));
        return this;
      }
      /**
       * <code>map&lt;string, .site.along101.proto.AllTypes.NestedEnum&gt; map_string_enum = 504;</code>
       */
      public Builder putAllMapStringEnum(
          java.util.Map<String, NestedEnum> values) {
        internalGetAdaptedMapStringEnumMap(
            internalGetMutableMapStringEnum().getMutableMap())
                .putAll(values);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @Deprecated
      public java.util.Map<String, Integer>
      getMutableMapStringEnumValue() {
        return internalGetMutableMapStringEnum().getMutableMap();
      }
      /**
       * <code>map&lt;string, .site.along101.proto.AllTypes.NestedEnum&gt; map_string_enum = 504;</code>
       */
      public Builder putMapStringEnumValue(
          String key,
          int value) {
        if (key == null) { throw new NullPointerException(); }
        internalGetMutableMapStringEnum().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, .site.along101.proto.AllTypes.NestedEnum&gt; map_string_enum = 504;</code>
       */
      public Builder putAllMapStringEnumValue(
          java.util.Map<String, Integer> values) {
        internalGetMutableMapStringEnum().getMutableMap()
            .putAll(values);
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:site.along101.proto.AllTypes)
    }

    // @@protoc_insertion_point(class_scope:site.along101.proto.AllTypes)
    private static final AllTypes DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new AllTypes();
    }

    public static AllTypes getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<AllTypes>
        PARSER = new com.google.protobuf.AbstractParser<AllTypes>() {
      public AllTypes parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AllTypes(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<AllTypes> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<AllTypes> getParserForType() {
      return PARSER;
    }

    public AllTypes getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_site_along101_proto_AllTypes_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_site_along101_proto_AllTypes_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_site_along101_proto_AllTypes_NestedMessage_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_site_along101_proto_AllTypes_NestedMessage_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_site_along101_proto_AllTypes_MapInt32Int32Entry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_site_along101_proto_AllTypes_MapInt32Int32Entry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_site_along101_proto_AllTypes_MapStringStringEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_site_along101_proto_AllTypes_MapStringStringEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_site_along101_proto_AllTypes_MapStringMessageEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_site_along101_proto_AllTypes_MapStringMessageEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_site_along101_proto_AllTypes_MapStringEnumEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_site_along101_proto_AllTypes_MapStringEnumEntry_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\017all_types.proto\022\023site.along101.proto\"\346" +
      "\013\n\010AllTypes\022\r\n\005int32\030\001 \001(\005\022\016\n\006uint32\030\002 \001" +
      "(\r\022\016\n\006sint32\030\003 \001(\021\022\017\n\007fixed32\030\004 \001(\007\022\020\n\010s" +
      "fixed32\030\005 \001(\017\022\r\n\005int64\030\006 \001(\003\022\016\n\006uint64\030\007" +
      " \001(\004\022\016\n\006sint64\030\010 \001(\022\022\017\n\007fixed64\030\t \001(\006\022\020\n" +
      "\010sfixed64\030\n \001(\020\022\014\n\004bool\030\013 \001(\010\022\r\n\005float\030\014" +
      " \001(\002\022\016\n\006double\030\r \001(\001\022\016\n\006string\030\016 \001(\t\022\r\n\005" +
      "bytes\030\017 \001(\014\022=\n\013nested_enum\030\020 \001(\0162(.site." +
      "along101.proto.AllTypes.NestedEnum\022C\n\016ne" +
      "sted_message\030\021 \001(\0132+.site.along101.proto" +
      ".AllTypes.NestedMessage\022\022\n\trep_int32\030\311\001 " +
      "\003(\005\022\023\n\nrep_uint32\030\312\001 \003(\r\022\023\n\nrep_sint32\030\313" +
      "\001 \003(\021\022\024\n\013rep_fixed32\030\314\001 \003(\007\022\025\n\014rep_sfixe" +
      "d32\030\315\001 \003(\017\022\022\n\trep_int64\030\316\001 \003(\003\022\023\n\nrep_ui" +
      "nt64\030\317\001 \003(\004\022\023\n\nrep_sint64\030\320\001 \003(\022\022\024\n\013rep_" +
      "fixed64\030\321\001 \003(\006\022\025\n\014rep_sfixed64\030\322\001 \003(\020\022\021\n" +
      "\010rep_bool\030\323\001 \003(\010\022\022\n\trep_float\030\324\001 \003(\002\022\023\n\n" +
      "rep_double\030\325\001 \003(\001\022\023\n\nrep_string\030\326\001 \003(\t\022\022" +
      "\n\trep_bytes\030\327\001 \003(\014\022B\n\017rep_nested_enum\030\330\001" +
      " \003(\0162(.site.along101.proto.AllTypes.Nest" +
      "edEnum\022H\n\022rep_nested_message\030\331\001 \003(\0132+.si" +
      "te.along101.proto.AllTypes.NestedMessage" +
      "\022J\n\017map_int32_int32\030\365\003 \003(\01320.site.along1" +
      "01.proto.AllTypes.MapInt32Int32Entry\022N\n\021" +
      "map_string_string\030\366\003 \003(\01322.site.along101" +
      ".proto.AllTypes.MapStringStringEntry\022P\n\022" +
      "map_string_message\030\367\003 \003(\01323.site.along10" +
      "1.proto.AllTypes.MapStringMessageEntry\022J" +
      "\n\017map_string_enum\030\370\003 \003(\01320.site.along101" +
      ".proto.AllTypes.MapStringEnumEntry\032\032\n\rNe" +
      "stedMessage\022\t\n\001a\030\001 \001(\005\0324\n\022MapInt32Int32E" +
      "ntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001\0326\n\024" +
      "MapStringStringEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005val" +
      "ue\030\002 \001(\t:\0028\001\032d\n\025MapStringMessageEntry\022\013\n" +
      "\003key\030\001 \001(\t\022:\n\005value\030\002 \001(\0132+.site.along10" +
      "1.proto.AllTypes.NestedMessage:\0028\001\032^\n\022Ma" +
      "pStringEnumEntry\022\013\n\003key\030\001 \001(\t\0227\n\005value\030\002" +
      " \001(\0162(.site.along101.proto.AllTypes.Nest" +
      "edEnum:\0028\001\"\023\n\nNestedEnum\022\005\n\001A\020\000b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_site_along101_proto_AllTypes_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_site_along101_proto_AllTypes_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_site_along101_proto_AllTypes_descriptor,
        new String[] { "Int32", "Uint32", "Sint32", "Fixed32", "Sfixed32", "Int64", "Uint64", "Sint64", "Fixed64", "Sfixed64", "Bool", "Float", "Double", "String", "Bytes", "NestedEnum", "NestedMessage", "RepInt32", "RepUint32", "RepSint32", "RepFixed32", "RepSfixed32", "RepInt64", "RepUint64", "RepSint64", "RepFixed64", "RepSfixed64", "RepBool", "RepFloat", "RepDouble", "RepString", "RepBytes", "RepNestedEnum", "RepNestedMessage", "MapInt32Int32", "MapStringString", "MapStringMessage", "MapStringEnum", });
    internal_static_site_along101_proto_AllTypes_NestedMessage_descriptor =
      internal_static_site_along101_proto_AllTypes_descriptor.getNestedTypes().get(0);
    internal_static_site_along101_proto_AllTypes_NestedMessage_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_site_along101_proto_AllTypes_NestedMessage_descriptor,
        new String[] { "A", });
    internal_static_site_along101_proto_AllTypes_MapInt32Int32Entry_descriptor =
      internal_static_site_along101_proto_AllTypes_descriptor.getNestedTypes().get(1);
    internal_static_site_along101_proto_AllTypes_MapInt32Int32Entry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_site_along101_proto_AllTypes_MapInt32Int32Entry_descriptor,
        new String[] { "Key", "Value", });
    internal_static_site_along101_proto_AllTypes_MapStringStringEntry_descriptor =
      internal_static_site_along101_proto_AllTypes_descriptor.getNestedTypes().get(2);
    internal_static_site_along101_proto_AllTypes_MapStringStringEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_site_along101_proto_AllTypes_MapStringStringEntry_descriptor,
        new String[] { "Key", "Value", });
    internal_static_site_along101_proto_AllTypes_MapStringMessageEntry_descriptor =
      internal_static_site_along101_proto_AllTypes_descriptor.getNestedTypes().get(3);
    internal_static_site_along101_proto_AllTypes_MapStringMessageEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_site_along101_proto_AllTypes_MapStringMessageEntry_descriptor,
        new String[] { "Key", "Value", });
    internal_static_site_along101_proto_AllTypes_MapStringEnumEntry_descriptor =
      internal_static_site_along101_proto_AllTypes_descriptor.getNestedTypes().get(4);
    internal_static_site_along101_proto_AllTypes_MapStringEnumEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_site_along101_proto_AllTypes_MapStringEnumEntry_descriptor,
        new String[] { "Key", "Value", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
